<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>编译OpenpenWrt</title>
    <link href="/2024/09/29/%E7%BC%96%E8%AF%91OpenWrt/"/>
    <url>/2024/09/29/%E7%BC%96%E8%AF%91OpenWrt/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h4><p>随着网络技术的快速发展，路由器也逐渐成为家庭和办公室不可或缺的一部分。然而，不同的路由器系统可能会带来不同的体验。OpenWRT是一个开源的操作系统，可以在各种类型的路由器上安装，从而使得使用者能够自由选择自己的软件环境。</p><p>本文将介绍如何编译和安装OpenWRT操作系统，帮助读者掌握这项技术，并为自己定制理想的网络环境。</p><p>注意<br>不要用root用户进行编译<br>默认登陆IP 192.168.1.1 密码 password</p><h3 id="编译OpenWrt"><a href="#编译OpenWrt" class="headerlink" title="编译OpenWrt"></a>编译OpenWrt</h3><p>安装编译依赖</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo apt update -y</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt install -y ack antlr<span class="hljs-number">3</span> asciidoc autoconf automake autopoint binutils bison build-essential bzip<span class="hljs-number">2</span> ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help<span class="hljs-number">2</span>man intltool libc<span class="hljs-number">6</span>-dev-i<span class="hljs-number">386</span> libelf-dev libglib<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-dev libgmp<span class="hljs-number">3</span>-dev libltdl-dev libmpc-dev libmpfr-dev libncurses<span class="hljs-number">5</span>-dev libncursesw<span class="hljs-number">5</span>-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p<span class="hljs-number">7</span>zip p<span class="hljs-number">7</span>zip-full patch pkgconf python<span class="hljs-number">2</span>.<span class="hljs-number">7</span> python<span class="hljs-number">3</span> python<span class="hljs-number">3</span>-pyelftools libpython<span class="hljs-number">3</span>-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib<span class="hljs-number">1</span>g-dev<br></code></pre></td></tr></table></figure><h3 id="下载openwrt源码"><a href="#下载openwrt源码" class="headerlink" title="下载openwrt源码"></a>下载openwrt源码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">官方版本：<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/openwrt/</span>openwrt<br><br>lede版本：<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/coolsnowwolf/</span>lede<br><br>istoreos版本：<br>git clone -b istoreos-<span class="hljs-number">23.05</span> --single-branch https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/istoreos/i</span>storeos.git<br></code></pre></td></tr></table></figure><p>如需指定openwrt版本，可以使用以下命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">查看稳定版，回车键拉到最低，按Q</span>结束！<br>git checkout v23.<span class="hljs-number">05</span> 指定版本，红色部分位版本号<br></code></pre></td></tr></table></figure><h3 id="添加插件主题"><a href="#添加插件主题" class="headerlink" title="添加插件主题"></a>添加插件主题</h3><p>打开openwrt文件夹，找到feeds.conf.default文件打开，添加到最下面</p><p>插件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">src-git helloworld https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fw876/</span>helloworld<br></code></pre></td></tr></table></figure><p>可选插件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">src-git amlogic https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ophub/</span>luci-app-amlogic 盒子必须添加 <br>src-git alist https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sbwml/</span>luci-app-alist Alist插件<br>src-git passwall_packages https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xiaorouji/</span>openwrt-passwall.git;packages<br>src-git passwall_luci https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xiaorouji/</span>openwrt-passwall.git;luci<br>src-git kenzo https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kenzok8/</span>openwrt-packages<br></code></pre></td></tr></table></figure><h5 id="更新源码"><a href="#更新源码" class="headerlink" title="更新源码"></a>更新源码</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/scripts/</span>feeds update -a<br></code></pre></td></tr></table></figure><h5 id="安装源码"><a href="#安装源码" class="headerlink" title="安装源码"></a>安装源码</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/scripts/</span>feeds install -a<br></code></pre></td></tr></table></figure><h3 id="定制openwrt系统"><a href="#定制openwrt系统" class="headerlink" title="定制openwrt系统"></a>定制openwrt系统</h3><p>打开openwrt配置面板</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make menuconfig</span> <br></code></pre></td></tr></table></figure><h5 id="必须设置项目（CPU架构，镜像文件格式）"><a href="#必须设置项目（CPU架构，镜像文件格式）" class="headerlink" title="必须设置项目（CPU架构，镜像文件格式）"></a>必须设置项目（CPU架构，镜像文件格式）</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss">Target System -&gt; QEMU ARM Virtual Machine<br><br>Subtarget -&gt; QEMU ARMv8 Virtual Machine (cortex-a53)<br><br>Target Profile -&gt; Default<br><br>输出固件格式<br>Target Images -&gt; tar<span class="hljs-selector-class">.gz</span><br><br>固件引导分区大小<br>Target Images —&gt; (<span class="hljs-number">16</span>) Kernel partition size (in MB) #默认是 (<span class="hljs-number">16</span>) 建议修改 (<span class="hljs-number">256</span>)<br><br>固件软件包分区大小<br>Target Images —&gt; (<span class="hljs-number">160</span>) Root filesystem partition size (in MB) #默认是 (<span class="hljs-number">160</span>) 建议修改 (<span class="hljs-number">512</span>)<br></code></pre></td></tr></table></figure><h5 id="盒子系统必选软件包-基础依赖包，仅保证打出的包可以写入EMMC-可以在EMMC上在线升级，不包含具体的应用-："><a href="#盒子系统必选软件包-基础依赖包，仅保证打出的包可以写入EMMC-可以在EMMC上在线升级，不包含具体的应用-：" class="headerlink" title="盒子系统必选软件包(基础依赖包，仅保证打出的包可以写入EMMC,可以在EMMC上在线升级，不包含具体的应用)："></a>盒子系统必选软件包(基础依赖包，仅保证打出的包可以写入EMMC,可以在EMMC上在线升级，不包含具体的应用)：</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs coq">Languages -&gt; Perl<br>-&gt; perl-http-date<br>-&gt; perlbase-file<br>-&gt; perlbase-getopt<br>-&gt; perlbase-<span class="hljs-built_in">time</span><br>-&gt; perlbase-unicode<br>-&gt; perlbase-utf8<br><br>Utilities -&gt; Compression -&gt; bsdtar 或 p7zip(非官方源)、pigz<br><br>-&gt; Disc -&gt; blkid、fdisk、lsblk、parted<br><br>-&gt; Filesystem -&gt; attr 、btrfs-progs(Build <span class="hljs-built_in">with</span> zstd support)、chattr、dosfstools、e2fsprogs、f2fs-tools、f2fsck、lsattr、mkf2fs、xfs-fsck、xfs-mkfs<br><br>-&gt; Shells -&gt; bash<br><br>-&gt; gawk、getopt、losetup、tar、uuidgen<br></code></pre></td></tr></table></figure><h5 id="Wifi基础包，打出的包可支持博通SDIO无线模块-Firmware不用选，因为打包源码中已经包含了来自Armbian的firmware，会自动覆盖openwrt-rootfs中已有的firmware"><a href="#Wifi基础包，打出的包可支持博通SDIO无线模块-Firmware不用选，因为打包源码中已经包含了来自Armbian的firmware，会自动覆盖openwrt-rootfs中已有的firmware" class="headerlink" title="Wifi基础包，打出的包可支持博通SDIO无线模块,Firmware不用选，因为打包源码中已经包含了来自Armbian的firmware，会自动覆盖openwrt rootfs中已有的firmware"></a>Wifi基础包，打出的包可支持博通SDIO无线模块,Firmware不用选，因为打包源码中已经包含了来自Armbian的firmware，会自动覆盖openwrt rootfs中已有的firmware</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Kernel modules -&gt; Wireless Drivers <br>-&gt; kmod-brcmfmac<span class="hljs-function"><span class="hljs-params">(SDIO)</span></span><br><span class="hljs-function">-&gt;</span> kmod-brcmutil<br>-&gt; kmod-cfg80211<br>-&gt; kmod-mac80211<br><br>-&gt; USB Support <br>-&gt; kmod-usb-net-asix<br>-&gt; kmod-usb-net-asix-ax88179<br>-&gt; kmod-usb2<br>-&gt; kmod-usb3<br><br>如果需要！USB3.<span class="hljs-number">0</span>转千兆网卡（型号：亚信asix-ax88179）则必选！<br><br>Network -&gt; WirelessAPD <br>-&gt; hostapd-common<br>-&gt; wpa-cli<br>-&gt; wpad-basic<br>-&gt; iw<br></code></pre></td></tr></table></figure><h5 id="插件和主题，语言设置选项，根据需求设置，为了减少编译失败的概率，除了盒子系统必要的晶晨插件，其他都不要安装，主题也是。可以编译成功后单独编译插件在安装。"><a href="#插件和主题，语言设置选项，根据需求设置，为了减少编译失败的概率，除了盒子系统必要的晶晨插件，其他都不要安装，主题也是。可以编译成功后单独编译插件在安装。" class="headerlink" title="插件和主题，语言设置选项，根据需求设置，为了减少编译失败的概率，除了盒子系统必要的晶晨插件，其他都不要安装，主题也是。可以编译成功后单独编译插件在安装。"></a>插件和主题，语言设置选项，根据需求设置，为了减少编译失败的概率，除了盒子系统必要的晶晨插件，其他都不要安装，主题也是。可以编译成功后单独编译插件在安装。</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs coq">LUCI -&gt; <span class="hljs-number">1.</span>Collections <br>-&gt; luci-lib-docker<br><br><span class="hljs-keyword">Modules</span> -&gt; Translations <br>-&gt; Chinese simplified 简体中文 自选<br><br>Applications <br>-&gt; luci-app-amlogic 晶晨插件，盒子必选<br><br>Themes <br>-&gt; luci-theme-argon 主题只安装包含argon的即可<br><br></code></pre></td></tr></table></figure><h5 id="常用插件列表"><a href="#常用插件列表" class="headerlink" title="常用插件列表"></a>常用插件列表</h5><p>一般来说只要选对你的机器型号其他按默认就行了，有特殊需要可以勾选需要的插件即可</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stata">luci-<span class="hljs-keyword">app</span>-accesscontrol 上网时间控制<br>luci-<span class="hljs-keyword">app</span>-adbyby-plus 广告屏蔽大师Plus +<br>luci-<span class="hljs-keyword">app</span>-amule 电驴下载–我一般精简掉<br>luci-<span class="hljs-keyword">app</span>-aria2 Aria2下载–我一般精简掉<br>luci-<span class="hljs-keyword">app</span>-arpbind IP/<span class="hljs-keyword">MAC</span>绑定<br>luci-<span class="hljs-keyword">app</span>-ddns 动态域名解析<br>luci-<span class="hljs-keyword">app</span>-flowoffload Turbo ACC FLOW转发加速<br>luci-<span class="hljs-keyword">app</span>-frpc 内网穿透 Frp–我一般精简掉，因为我的是公网IP<br>luci-<span class="hljs-keyword">app</span>-hd-idle 硬盘休眠<br>luci-<span class="hljs-keyword">app</span>-ipsec-vpnd IPSec服务端<br>luci-<span class="hljs-keyword">app</span>-mwan3 MWAN负载均衡<br>luci-<span class="hljs-keyword">app</span>-nlbwmon 网络带宽监视器<br>luci-<span class="hljs-keyword">app</span>-openvpn OpenVPN客户端<br>luci-<span class="hljs-keyword">app</span>-openvpn-server OpenVPN服务端<br>luci-<span class="hljs-keyword">app</span>-pptp-server PPTP服务端<br>luci-<span class="hljs-keyword">app</span>-ramfree 释放内存<br>luci-<span class="hljs-keyword">app</span>-samba4 网络共享(samba)<br>luci-<span class="hljs-keyword">app</span>-sfe Turbo ACC网络加速(开启Fast Path转发加速)<br>luci-<span class="hljs-keyword">app</span>-sqm 流量智能队列管理(QOS)<br>luci-<span class="hljs-keyword">app</span>-ssr-plus 介绍 神秘代码：echo 0xDEADBEEF &gt; /etc/config/google_fu_mode<br>luci-<span class="hljs-keyword">app</span>-transmission BT下载–我一般精简掉<br>luci-<span class="hljs-keyword">app</span>-upnp 通用即插即用UPnP(端口自动转发)<br>luci-<span class="hljs-keyword">app</span>-usb-printer USB 打印服务器–我一般精简掉<br>luci-<span class="hljs-keyword">app</span>-vlmcsd KMS服务器（<span class="hljs-keyword">WIN</span>激活工具）–我一般精简掉<br>luci-<span class="hljs-keyword">app</span>-vsftpd FTP服务器–我一般精简掉<br>luci-<span class="hljs-keyword">app</span>-webadmin Web管理<br>luci-<span class="hljs-keyword">app</span>-wireguard VPN服务器 WireGuard状态<br>luci-<span class="hljs-keyword">app</span>-wol 网络唤醒<br>luci-<span class="hljs-keyword">app</span>-wrtbwmon 实时流量监测<br></code></pre></td></tr></table></figure><p>支持 iPv6：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Extra</span> packages —&gt; ipv<span class="hljs-number">6</span>helper （选定这个后下面几项自动选择了）<br><span class="hljs-attribute">Network</span> —&gt; odhcp<span class="hljs-number">6</span>c<br><span class="hljs-attribute">Network</span> —&gt; odhcpd-ipv<span class="hljs-number">6</span>only<br><span class="hljs-attribute">LuCI</span> —&gt; Protocols —&gt; luci-proto-ipv<span class="hljs-number">6</span><br><span class="hljs-attribute">LuCI</span> —&gt; Protocols —&gt; luci-proto-ppp<br></code></pre></td></tr></table></figure><h5 id="如果需要重新配置可执行一下命令："><a href="#如果需要重新配置可执行一下命令：" class="headerlink" title="如果需要重新配置可执行一下命令："></a>如果需要重新配置可执行一下命令：</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rm -rf <span class="hljs-string">./tmp</span> &amp;&amp; rm -rf <span class="hljs-string">.config</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make menuconfig</span><br></code></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><h5 id="下载dll库，V-s-显示任务详细情况，（-j-后面是线程数）"><a href="#下载dll库，V-s-显示任务详细情况，（-j-后面是线程数）" class="headerlink" title="下载dll库，V=s 显示任务详细情况，（-j 后面是线程数）"></a>下载dll库，V=s 显示任务详细情况，（-j 后面是线程数）</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">make -j8 download <span class="hljs-attribute">V</span>=s<br></code></pre></td></tr></table></figure><h5 id="编译固件，-j8-线程数，根据当前cpu调整"><a href="#编译固件，-j8-线程数，根据当前cpu调整" class="headerlink" title="编译固件，-j8 线程数，根据当前cpu调整"></a>编译固件，-j8 线程数，根据当前cpu调整</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">make <span class="hljs-attribute">V</span>=s -j8<br></code></pre></td></tr></table></figure><h5 id="如果编译失败"><a href="#如果编译失败" class="headerlink" title="如果编译失败"></a>如果编译失败</h5><p>删除编译目录/bin和/build_dir目录中的文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure><p>以下命令除了删除编译目录之外还删除编译工具目录，删除/bin和/build_dir目录的中的文件以及/staging_dir、/toolchain、/tmp和/logs中的文件，一般在更换CPU架构的情况下才操作。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make dirclean</span><br></code></pre></td></tr></table></figure><h4 id="编译完成后固件输出路径"><a href="#编译完成后固件输出路径" class="headerlink" title="编译完成后固件输出路径"></a>编译完成后固件输出路径</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">openwrt<span class="hljs-regexp">/bin/</span>targets<br></code></pre></td></tr></table></figure><h3 id="固件扩容"><a href="#固件扩容" class="headerlink" title="固件扩容"></a>固件扩容</h3><p>解压gz包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gzip -dk</span><br></code></pre></td></tr></table></figure><p>count=兆</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=/dev/zero <span class="hljs-attribute">bs</span>=1M <span class="hljs-attribute">count</span>=2000 &gt;&gt;openwrt.img<br></code></pre></td></tr></table></figure><p>使用parted打开固件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">parted</span> openwrt.img<br></code></pre></td></tr></table></figure><p>显示固件分区</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">print<br>编号  起始点  结束点  大小    类型     文件系统  标志<br> <span class="hljs-number">1</span>    <span class="hljs-number">262</span>kB   <span class="hljs-number">17.0</span>MB  <span class="hljs-number">16.8</span>MB  <span class="hljs-keyword">primary</span>  ext2      启动<br> <span class="hljs-number">2</span>    <span class="hljs-number">17.3</span>MB  <span class="hljs-number">185</span>MB   <span class="hljs-number">168</span>MB   <span class="hljs-keyword">primary</span><br></code></pre></td></tr></table></figure><p>扩容编号2分区，扩容至100%</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">resizepart</span> <span class="hljs-number">2</span> <span class="hljs-number">100</span>%<br></code></pre></td></tr></table></figure><p>显示固件分区</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">print<br>编号  起始点  结束点  大小    类型     文件系统  标志<br> <span class="hljs-number">1</span>    <span class="hljs-number">262</span>kB   <span class="hljs-number">17.0</span>MB  <span class="hljs-number">16.8</span>MB  <span class="hljs-keyword">primary</span>  ext2      启动<br> <span class="hljs-number">2</span>    <span class="hljs-number">17.3</span>MB  <span class="hljs-number">2282</span>MB  <span class="hljs-number">2265</span>MB  <span class="hljs-keyword">primary</span><br></code></pre></td></tr></table></figure><p>退出parted</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><h3 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h3><p>如果出现以下报错，多数是选择了luci-app-samba4，如果需要luci-app-samba4，首先在Extra packages —&gt; 把autosamba取消，在选择插件的那里把luci-app-samba取消，然后在Network —&gt; 把 samba36-server取消，最后选择luci-app-samba4</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pkg_hash_check_unresolved</span>: cannot find dependency samba<span class="hljs-number">4</span>-libs for samba<span class="hljs-number">4</span>-server<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用apcupsd管理UPS实现断电自动关机</title>
    <link href="/2023/07/02/%E4%BD%BF%E7%94%A8apcupsd%E7%AE%A1%E7%90%86UPS%E5%AE%9E%E7%8E%B0%E6%96%AD%E7%94%B5%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA/"/>
    <url>/2023/07/02/%E4%BD%BF%E7%94%A8apcupsd%E7%AE%A1%E7%90%86UPS%E5%AE%9E%E7%8E%B0%E6%96%AD%E7%94%B5%E8%87%AA%E5%8A%A8%E5%85%B3%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Apcupsd 是一个 UPS 控制系统，允许在发生电源故障时有序关闭计算机。</p><h3 id="安装-apcupsd"><a href="#安装-apcupsd" class="headerlink" title="安装 apcupsd"></a>安装 apcupsd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install apcupsd<br></code></pre></td></tr></table></figure><h3 id="配置-apcupsd"><a href="#配置-apcupsd" class="headerlink" title="配置 apcupsd"></a>配置 apcupsd</h3><p>修改 apcupsd 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/apcupsd/apcupsd.conf<br></code></pre></td></tr></table></figure><p>在 UPSCABLE 后添加 usb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">UPSCABLE usb<br></code></pre></td></tr></table></figure><p>在 UPSTYPE 后添加 usb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">UPSTYPE usb<br></code></pre></td></tr></table></figure><p>在 DEVICE 后留空，系统便会自动检测 USB 连接 UPS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEVICE<br></code></pre></td></tr></table></figure><p>断电后自动关机（满足其中任一条件便会触发）<br>UPS剩余电量小于50%时关闭服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BATTERYLEVEL 50<br></code></pre></td></tr></table></figure><p>UPS电池剩余时间小于10分钟时关闭服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">MINUTES 10<br></code></pre></td></tr></table></figure><p>重启 apcupsd</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart apcupsd.service<br></code></pre></td></tr></table></figure><p>查看UPS运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apcaccess<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令收集整理</title>
    <link href="/2023/05/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/"/>
    <url>/2023/05/11/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>查看远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote -v<br></code></pre></td></tr></table></figure><p>查看远程仓库名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote<br></code></pre></td></tr></table></figure><p>修改远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote set-url origin http://192.168.5.254:3000/chziyue/CII.git<br></code></pre></td></tr></table></figure><p>显示工作区状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>存档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>入库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;&quot;<br></code></pre></td></tr></table></figure><p>提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push<br></code></pre></td></tr></table></figure><p>退档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset HEAD<br></code></pre></td></tr></table></figure><p>退库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset –hard<br></code></pre></td></tr></table></figure><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone<br></code></pre></td></tr></table></figure><p>仓库日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><h1 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h1><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>远程拉取代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone 地址<br></code></pre></td></tr></table></figure><h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><p>查看所有文件状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>查看指定文件状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status 文件名<br></code></pre></td></tr></table></figure><p>提交所有文件到暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>提交暂存区中的内容到本地仓库 -m 提交信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;消息内容&quot;<br></code></pre></td></tr></table></figure><p>修改上一次提交到本地仓库的备注信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit --amend<br></code></pre></td></tr></table></figure><p>提交本地仓库中的内容到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push<br></code></pre></td></tr></table></figure><p>强制提交本地仓库种的内容到远程仓库(慎用)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u -f<br></code></pre></td></tr></table></figure><p>提交dev分支到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push dev<br></code></pre></td></tr></table></figure><p>查看提交历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log --graph --pretty=format:&quot;%h %s&quot;<br></code></pre></td></tr></table></figure><h1 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h1><p>拉取远程仓库dev分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull dev<br></code></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除指定文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rm -r --cached<br></code></pre></td></tr></table></figure><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>查看所有提交版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log<br></code></pre></td></tr></table></figure><p>查看已回退掉的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reflog<br></code></pre></td></tr></table></figure><p>版本回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --hard 版本号<br></code></pre></td></tr></table></figure><p>合并版本(已提交到远程仓库的不建议合并)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rebase -i 版本号<br>git rebase -i HEAD~3(合并当前最近的3个版本)<br><span class="hljs-meta">#</span><span class="bash">第一行保留pick，下面的pick改成s（s代表合并到上一个版本）</span><br><br>修改提交信息<br><span class="hljs-meta">#</span><span class="bash"> This is a combination of 3 commits.</span><br><span class="hljs-meta">#</span><span class="bash"> This is the 1st commit message:</span><br><br>1.0版本编译后<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> This is the commit message <span class="hljs-comment">#2:</span></span><br><br>CentOS 1.0版本<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> This is the commit message <span class="hljs-comment">#3:</span></span><br><br>Debian 1.0版本<br><br>修改后<br><span class="hljs-meta">#</span><span class="bash"> This is a combination of 3 commits.</span><br><span class="hljs-meta">#</span><span class="bash"> This is the 1st commit message:</span><br><br>1.0版本编译后 &amp; CentOS 1.0版本 &amp; Debian 1.0版本<br></code></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>查看所有本地分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><p>查看所有远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -r<br></code></pre></td></tr></table></figure><p>新建dev分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch dev<br></code></pre></td></tr></table></figure><p>新建dev分支并切换到该分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b dev<br></code></pre></td></tr></table></figure><p>合并dev分支到当前分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge dev<br></code></pre></td></tr></table></figure><p>删除dev分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d dev<br></code></pre></td></tr></table></figure><p>删除远程dev分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin --delete dev<br>git branch -dr dev<br></code></pre></td></tr></table></figure><p>切换到dev分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout dev<br></code></pre></td></tr></table></figure><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>解决冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rebase --continue<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux各发行版包管理工具使用说明</title>
    <link href="/2023/05/07/Linux%E5%90%84%E5%8F%91%E8%A1%8C%E7%89%88%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/05/07/Linux%E5%90%84%E5%8F%91%E8%A1%8C%E7%89%88%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇介绍常见 Linux 操作系统的安装包管理工具，主要介绍其使用命令。<br>包管理系统除了安装软件外，它还提供了工具来更新已经安装的包。包存储库有助于确保你系统中使用的代码是经过审查的，并且软件的安装版本已经得到了开发人员和包维护人员的认可。</p><h4 id="各发行版对应的包管理工具"><a href="#各发行版对应的包管理工具" class="headerlink" title="各发行版对应的包管理工具"></a>各发行版对应的包管理工具</h4><table><thead><tr><th align="center">发行版名称</th><th align="center">系列</th><th align="center">包管理工具</th><th align="center">cat /etc/os-release</th></tr></thead><tbody><tr><td align="center">Centos</td><td align="center">Red Hat</td><td align="center">yum</td><td align="center">NAME=”CentOS Linux”</td></tr><tr><td align="center">Debian</td><td align="center">Debian</td><td align="center">apt-get</td><td align="center">NAME=”Debian GNU/Linux”</td></tr><tr><td align="center">Ubuntu</td><td align="center">Debian</td><td align="center">apt-get</td><td align="center">NAME=”Ubuntu”</td></tr><tr><td align="center">fedora</td><td align="center">Red Hat</td><td align="center">yum</td><td align="center">NAME=Fedora</td></tr><tr><td align="center">OpenSUSE</td><td align="center">Red Hat</td><td align="center">zypper</td><td align="center">NAME=”openSUSE Leap”</td></tr><tr><td align="center">amazonlinux</td><td align="center">Red Hat</td><td align="center">yum</td><td align="center">NAME=”Amazon Linux”</td></tr><tr><td align="center">oraclelinux</td><td align="center">Red Hat</td><td align="center">yum</td><td align="center">NAME=”Oracle Linux Server”</td></tr><tr><td align="center">Arch</td><td align="center">Red Hat</td><td align="center">pacman</td><td align="center">NAME=”Arch Linux”</td></tr><tr><td align="center">Mageia</td><td align="center">Red Hat</td><td align="center">dnf</td><td align="center">NAME=”Mageia”</td></tr><tr><td align="center">EulerOS</td><td align="center">Red Hat</td><td align="center">yum</td><td align="center">NAME=”EulerOS”</td></tr><tr><td align="center">Kali</td><td align="center">Debian</td><td align="center">apt-get</td><td align="center">NAME=”Kali GNU/Linux”</td></tr><tr><td align="center">Alpine</td><td align="center">Red Hat</td><td align="center">apk</td><td align="center">NAME=”Alpine Linux”</td></tr><tr><td align="center">Photon</td><td align="center">Red Hat</td><td align="center">yum</td><td align="center">NAME=”VMware Photon OS”</td></tr><tr><td align="center">Clear</td><td align="center">Red Hat</td><td align="center">swupd</td><td align="center">NAME=”Clear Linux OS”</td></tr><tr><td align="center">Mint</td><td align="center">Debian</td><td align="center">apt</td><td align="center">NAME=”Linux Mint”</td></tr><tr><td align="center">EndeavourOS</td><td align="center">Arch</td><td align="center">pacman</td><td align="center">NAME=”EndeavourOS”</td></tr></tbody></table><h4 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/os-release<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/version<br></code></pre></td></tr></table></figure><h4 id="yum-包管理工具"><a href="#yum-包管理工具" class="headerlink" title="yum 包管理工具"></a>yum 包管理工具</h4><p>查找软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum search<br></code></pre></td></tr></table></figure><p>列出所有可安装的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list<br></code></pre></td></tr></table></figure><p>列出所有可更新的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list updates<br></code></pre></td></tr></table></figure><p>列出所有已安装的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list installed<br></code></pre></td></tr></table></figure><p>列出所有已安装但不在 yum Repository 內的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list extras<br></code></pre></td></tr></table></figure><p>列出所指定软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum list<br></code></pre></td></tr></table></figure><p>使用 yum 获取软件包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum info<br></code></pre></td></tr></table></figure><p>列出所有软件包的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum info<br></code></pre></td></tr></table></figure><p>列出所有可更新的软件包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum info updates<br></code></pre></td></tr></table></figure><p>列出所有已安裝的软件包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum info installed<br></code></pre></td></tr></table></figure><p>列出所有已安裝但不在 yum Repository 內的软件包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum info extras<br></code></pre></td></tr></table></figure><p>列出软件包提供哪些文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum provides<br></code></pre></td></tr></table></figure><h4 id="dnf-包管理工具"><a href="#dnf-包管理工具" class="headerlink" title="dnf 包管理工具"></a>dnf 包管理工具</h4><p>安装 DNF 包管理器<br>1、为了安装 DNF ，必须先安装并启用 epel-release 依赖。<br>在系统中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br></code></pre></td></tr></table></figure><p>2、使用 epel-release 依赖中的 YUM 命令来安装 DNF 包。在系统中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install dnf<br></code></pre></td></tr></table></figure><p>查看 DNF 包管理器版本<br>用处：该命令用于查看安装在系统中的 DNF 包管理器的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf –version<br></code></pre></td></tr></table></figure><p>查看系统中可用的 DNF 软件库<br>用处：该命令用于显示系统中可用的 DNF 软件库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf repolist<br></code></pre></td></tr></table></figure><p>查看系统中可用和不可用的所有的 DNF 软件库<br>用处：该命令用于显示系统中可用和不可用的所有的 DNF 软件库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf repolist all<br></code></pre></td></tr></table></figure><p>列出所有 RPM 包<br>用处：该命令用于列出用户系统上的所有来自软件库的可用软件包和所有已经安装在系统上的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf list<br></code></pre></td></tr></table></figure><p>列出所有安装了的 RPM 包<br>用处：该命令用于列出所有安装了的 RPM 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf list installed<br></code></pre></td></tr></table></figure><p>列出所有可供安装的 RPM 包<br>用处：该命令用于列出所有可用软件库的可供安装的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf list available<br></code></pre></td></tr></table></figure><p>搜索软件库中的 RPM 包<br>用处：当你不知道你想要安装的软件的准确名称时，可以用该命令来搜索软件包。你需要在”search”参数后面键入软件的部分名称来搜索。（在本例中我们使用”nano”）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf search nano<br></code></pre></td></tr></table></figure><p>查找某一文件的提供者<br>用处：当你想要查看是哪个软件包提供了系统中的某一文件时，你可以使用这条命令。（在本例中，我们将查找”/bin/bash”这个文件的提供者）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf provides /bin/bash<br></code></pre></td></tr></table></figure><p>查看软件包详情<br>用处：当你想在安装某一个软件包之前查看它的详细信息时，这条命令可以帮到你。（在本例中，我们将查看”nano”这一软件包的详细信息）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf info nano<br></code></pre></td></tr></table></figure><p>安装软件包<br>用处：使用该命令，系统将会自动安装对应的软件及其所需的所有依赖（在本例中，我们将用该命令安装nano软件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install nano<br></code></pre></td></tr></table></figure><p>升级软件包<br>用处：该命令用于升级制定软件包（在本例中，我们将用命令升级”systemd”这一软件包）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf update systemd<br></code></pre></td></tr></table></figure><p>检查系统软件包的更新<br>用处：该命令用于检查系统中所有软件包的更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf check-update<br></code></pre></td></tr></table></figure><p>升级所有系统软件包<br>用处：该命令用于升级系统中所有有可用升级的软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf update 或 dnf upgrade<br></code></pre></td></tr></table></figure><p>删除软件包<br>用处：删除系统中指定的软件包（在本例中我们将使用命令删除”nano”这一软件包）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf remove nano 或 dnf erase nano<br></code></pre></td></tr></table></figure><p>删除无用孤立的软件包<br>用处：当没有软件再依赖它们时，某一些用于解决特定软件依赖的软件包将会变得没有存在的意义，该命令就是用来自动移除这些没用的孤立软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf autoremove<br></code></pre></td></tr></table></figure><p>删除缓存的无用软件包<br>用处：在使用 DNF 的过程中，会因为各种原因在系统中残留各种过时的文件和未完成的编译工程。我们可以使用该命令来删除这些没用的垃圾文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf clean all<br></code></pre></td></tr></table></figure><p>获取有关某条命令的使用帮助<br>用处：该命令用于获取有关某条命令的使用帮助（包括可用于该命令的参数和该命令的用途说明）（本例中我们将使用命令获取有关命令”clean”的使用帮助）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf help clean<br></code></pre></td></tr></table></figure><p>查看所有的 DNF 命令及其用途<br>用处：该命令用于列出所有的 DNF 命令及其用途</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf help<br></code></pre></td></tr></table></figure><p>查看 DNF 命令的执行历史<br>用处：您可以使用该命令来查看系统上 DNF 命令的执行历史。通过这个手段您可以知道在自您使用 DNF 开始有什么软件被安装和卸载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf history<br></code></pre></td></tr></table></figure><p>查看所有的软件包组<br>用处：该命令用于列出所有的软件包组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf grouplist<br></code></pre></td></tr></table></figure><p>安装一个软件包组<br>用处：该命令用于安装一个软件包组（本例中，我们将用命令安装”Educational Software”这个软件包组）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf groupinstall &#x27;Educational Software&#x27;<br></code></pre></td></tr></table></figure><p>升级一个软件包组中的软件包<br>用处：该命令用于升级一个软件包组中的软件包（本例中，我们将用命令升级”Educational Software”这个软件包组中的软件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf groupupdate &#x27;Educational Software&#x27;<br></code></pre></td></tr></table></figure><p>删除一个软件包组<br>用处：该命令用于删除一个软件包组（本例中，我们将用命令删除”Educational Software”这个软件包组）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf groupremove &#x27;Educational Software&#x27;<br></code></pre></td></tr></table></figure><p>从特定的软件包库安装特定的软件<br>用处：该命令用于从特定的软件包库安装特定的软件（本例中我们将使用命令从软件包库 epel 中安装 phpmyadmin 软件包）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf –enablerepo=epel install phpmyadmin<br></code></pre></td></tr></table></figure><p>更新软件包到最新的稳定发行版<br>用处：该命令可以通过所有可用的软件源将已经安装的所有软件包更新到最新的稳定发行版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf distro-sync<br></code></pre></td></tr></table></figure><p>重新安装特定软件包<br>用处：该命令用于重新安装特定软件包（本例中，我们将使用命令重新安装”nano”这个软件包）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf reinstall nano<br></code></pre></td></tr></table></figure><p>回滚某个特定软件的版本<br>用处：该命令用于降低特定软件包的版本（如果可能的话）（本例中，我们将使用命令降低”acpid”这个软件包的版本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf downgrade acpid<br></code></pre></td></tr></table></figure><h4 id="apt-包管理工具"><a href="#apt-包管理工具" class="headerlink" title="apt 包管理工具"></a>apt 包管理工具</h4><p>搜索包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-cache search<br></code></pre></td></tr></table></figure><p>获取包的相关信息，如说明、大小、版本等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-cache show<br></code></pre></td></tr></table></figure><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install<br></code></pre></td></tr></table></figure><p>重新安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install package --reinstall<br></code></pre></td></tr></table></figure><p>删除包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get remove<br></code></pre></td></tr></table></figure><p>删除包，包括删除配置文件等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get remove --purge<br></code></pre></td></tr></table></figure><p>package 删除包及其依赖的软件包+配置文件等（只对6.10有效）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get autoremove --purge<br></code></pre></td></tr></table></figure><p>更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br></code></pre></td></tr></table></figure><p>更新已安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get upgrade<br></code></pre></td></tr></table></figure><p>升级系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get dist-upgrade<br></code></pre></td></tr></table></figure><p>使用 dselect 升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get dselect-upgrade<br></code></pre></td></tr></table></figure><p>了解使用依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-cache depends<br></code></pre></td></tr></table></figure><p>了解某个具体的依赖,查看该包被哪些包依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-cache rdepends<br></code></pre></td></tr></table></figure><p>安装相关的编译环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get build-dep<br></code></pre></td></tr></table></figure><p>下载该包的源代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get source<br></code></pre></td></tr></table></figure><p>清理下载文件的存档 &amp;&amp; 只清理过时的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get clean &amp;&amp; apt-get autoclean<br></code></pre></td></tr></table></figure><p>检查是否有损坏的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get check<br></code></pre></td></tr></table></figure><p>查找filename属于哪个软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -S filename<br></code></pre></td></tr></table></figure><p>查找filename属于哪个软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-file search filename<br></code></pre></td></tr></table></figure><p>列出软件包的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-file list packagename<br></code></pre></td></tr></table></figure><p>更新apt-file的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-file update<br></code></pre></td></tr></table></figure><h4 id="zypper-包管理工具"><a href="#zypper-包管理工具" class="headerlink" title="zypper 包管理工具"></a>zypper 包管理工具</h4><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper install<br></code></pre></td></tr></table></figure><p>安装包源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper source-install<br></code></pre></td></tr></table></figure><p>更新包某个包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper update<br></code></pre></td></tr></table></figure><p>更新所有包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper update<br></code></pre></td></tr></table></figure><p>删除包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper remove<br></code></pre></td></tr></table></figure><p>查找包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper search<br></code></pre></td></tr></table></figure><p>查看包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper info<br></code></pre></td></tr></table></figure><p>查看所有可打的补丁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper patches<br></code></pre></td></tr></table></figure><p>安装指定补丁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper patch<br></code></pre></td></tr></table></figure><p>锁包 不能被移除或升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper al<br></code></pre></td></tr></table></figure><p>查看所有被锁的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper ll<br></code></pre></td></tr></table></figure><p>解锁包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">zypper rl<br></code></pre></td></tr></table></figure><h4 id="pacman-包管理工具"><a href="#pacman-包管理工具" class="headerlink" title="pacman 包管理工具"></a>pacman 包管理工具</h4><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -S<br></code></pre></td></tr></table></figure><p>删除单个包 保留全部已安装的依赖关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -R<br></code></pre></td></tr></table></figure><p>删除指定的包 及所有没有被其他已安装关键包使用的依赖关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Rs<br></code></pre></td></tr></table></figure><p>缺省的，pacman会备份被删除程序的配置文件，将它们加上*.pacsave扩展名。如果你在删除软件包时要同时删除相应的配置文件（这种行为在基于Debian的系统中称为清除purging），你可是使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Rn<br></code></pre></td></tr></table></figure><p>当然，它也可以加上-s参数来删除当前无用的依赖。这样的话，真正删除一个软件包、它的配置文件以及所有不再需要的依赖的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Rsn<br></code></pre></td></tr></table></figure><p>Pacman能够只用一个指令来升级系统中所有已安装的包。升级的时间取决于你的系统有多新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Su<br></code></pre></td></tr></table></figure><p>当然，最好做法的是将升级系统和同步仓库数据合成为一条指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Syu<br></code></pre></td></tr></table></figure><p>搜索包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Ss<br></code></pre></td></tr></table></figure><p>查询已安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Qs<br></code></pre></td></tr></table></figure><p>包详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Si<br></code></pre></td></tr></table></figure><p>获取已安装软件包所包含文件的列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Ql<br></code></pre></td></tr></table></figure><p>你也可以通过查询数据库获知目前你的文件系统中某个文件是属于哪个软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Qo /path/to/a/file<br></code></pre></td></tr></table></figure><p>要罗列所有不再作为依赖的软件包(孤立orphans)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Qdt<br></code></pre></td></tr></table></figure><p>Pacman使用-Q参数来查询本地软件包数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Q<br></code></pre></td></tr></table></figure><p>使用-S参数来查询远程同步的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -S<br></code></pre></td></tr></table></figure><p>下载包而不安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Sw<br></code></pre></td></tr></table></figure><p>安装一个’本地’包（不从源里）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -U /path/to/package/package_name-version.pkg.tar.gz<br></code></pre></td></tr></table></figure><p>安装一个’远程’包（不从源里）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -U http://url/package_name-version.pkg.tar.gz<br></code></pre></td></tr></table></figure><p>清理当前未被安装软件包的缓存(/var/cache/pacman/pkg):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Sc<br></code></pre></td></tr></table></figure><p>完全清理包缓存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -Scc<br></code></pre></td></tr></table></figure><h4 id="apk-包管理工具"><a href="#apk-包管理工具" class="headerlink" title="apk 包管理工具"></a>apk 包管理工具</h4><p>源文件位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/apk/repositories<br></code></pre></td></tr></table></figure><p>配置阿里源镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories<br></code></pre></td></tr></table></figure><p>配置科大源镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk add<br></code></pre></td></tr></table></figure><p>卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk del<br></code></pre></td></tr></table></figure><p>更新包列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk update<br></code></pre></td></tr></table></figure><p>升级所有已安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk upgrade<br></code></pre></td></tr></table></figure><p>搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk search<br></code></pre></td></tr></table></figure><p>列出所有已安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk info<br></code></pre></td></tr></table></figure><p>列出某个包的详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apk info git<br></code></pre></td></tr></table></figure><h4 id="swupd-包管理工具"><a href="#swupd-包管理工具" class="headerlink" title="swupd 包管理工具"></a>swupd 包管理工具</h4><p>搜索包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">swupd search<br></code></pre></td></tr></table></figure><p>包信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">swupd bundle-info<br></code></pre></td></tr></table></figure><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">swupd bundle-add<br></code></pre></td></tr></table></figure><p>卸载包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">swupd bundle-remove<br></code></pre></td></tr></table></figure><p>列出已安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">swupd bundle-list |grep<br></code></pre></td></tr></table></figure><p>禁用和启用自动更新</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo swupd autoupdate   //验证当前的自动更新设置,enable就是默认开启自动更新<br>sudo swupd autoupdate --disable  //禁用自动更新<br>sudo swupd<span class="hljs-built_in"> check-update </span> //手动检查更新<br>sudo swupd autoupdate --enable  //启用自动更新<br></code></pre></td></tr></table></figure><p>其他</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">swupd info  <span class="hljs-regexp">//</span>返回当前安装的版本和更新服务器。<br>swupd update  <span class="hljs-regexp">//</span>如果未使用参数，则更新到特定版本或最新版本<br>swupd –help  <span class="hljs-regexp">//</span>列出其他 swupd 命令。<br>man swupd  <span class="hljs-regexp">//</span>打开 swupd 手册页。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统下组建RAID</title>
    <link href="/2023/04/30/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%BB%84%E5%BB%BARAID/"/>
    <url>/2023/04/30/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%BB%84%E5%BB%BARAID/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>磁盘阵列是由很多块独立的磁盘，组合成一个容量巨大的磁盘组，利用个别磁盘提供数据所产生加成效果提升整个磁盘系统效能。利用这项技术，将数据切割成许多区段，分别存放在各个硬盘上。</p><h3 id="RAID-级别介绍"><a href="#RAID-级别介绍" class="headerlink" title="RAID 级别介绍"></a>RAID 级别介绍</h3><h3 id="RAID0"><a href="#RAID0" class="headerlink" title="RAID0"></a>RAID0</h3><p>实现 RAID0 需要两块以上硬盘，以两块硬盘组 RAID0 为例，两块硬盘合为一块，数据同时分散在两块硬盘，带宽加倍，读写性能也加倍，但是它不提供数据冗余保护。一旦数据损坏将无法找回，它的容量利用率为100%。</p><h3 id="RAID1"><a href="#RAID1" class="headerlink" title="RAID1"></a>RAID1</h3><p>组 RAID1 需要两块硬盘，其工作原理是将一份完整的数据，复制到另一块硬盘中，一份原始数据，一份镜像数据，两块硬盘容量等同于一块硬盘容量，容量为硬盘总容量的50%，写速度通常较慢，但是读取速度较单一硬盘来的快。工作磁盘受到损坏，系统会从镜像磁盘读取数据，数据可被找回。</p><h3 id="RAID5"><a href="#RAID5" class="headerlink" title="RAID5"></a>RAID5</h3><p>组 RAID5 至少需要3块硬盘。 是将数据以块为单位分散到各个硬盘，不对数据做备份，把数据和其对应的奇偶校验信息存储到组成 RAID5 的各个磁盘。当一个磁盘的数据毁坏，可通过校验信息恢复数据，如下图所示 ，用四块硬盘组 RAID5如果数据 A3毁坏，通过 A1+A2+Ap 可以恢复 A3， 如果数据 C2 毁坏，通过 C1+Cp+C3 来恢复 C2。组 RAID5 最多可以坏一块硬盘，它的容量为（n-1）块硬盘总容量。</p><h3 id="RAID6"><a href="#RAID6" class="headerlink" title="RAID6"></a>RAID6</h3><p>RAID6 是基于 RAID5 技术基础上，与 RAID5 不同的是，组 RAID6 最少需要4块盘，每个数据块有两套奇偶校验信息，两套奇偶校验信息采取不同的算法。即使两块硬盘数据同时丢失，也不会影响数据的使用。如下图所示，假如数据A1和数据 A2 丢失，通过 A3、Ap 、Aq 可以恢复数据 A1 和 A3。组 RAID6 最多允许坏2块硬盘，它的容量为（n-2）块硬盘总容量。</p><h3 id="RAID01-和-RAID10"><a href="#RAID01-和-RAID10" class="headerlink" title="RAID01 和 RAID10"></a>RAID01 和 RAID10</h3><p>RAID01 是先做条带化再作镜像，本质是对物理磁盘实现镜像；而 RAID10 是先做镜像再作条带化，是对虚拟磁盘实现镜像。</p><p>RAID01 兼备了 RAID0 和 RAID1 的优点，它先用两块磁盘建立镜像，然后再在镜像内部做条带化。RAID01 的数据将同时写入到两个磁盘阵列中，如果其中一个阵列损坏，仍可继续工作，保证数据安全性的同时又提高了性能。RAID01 和 RAID10 内部都含有 RAID1 模式，因此整体磁盘利用率均仅为 50% 。</p><h2 id="以-Ubuntu-系统为例，组建10盘-RAID6-全过程"><a href="#以-Ubuntu-系统为例，组建10盘-RAID6-全过程" class="headerlink" title="以 Ubuntu 系统为例，组建10盘 RAID6 全过程"></a>以 Ubuntu 系统为例，组建10盘 RAID6 全过程</h2><p>查看目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lsblk<br></code></pre></td></tr></table></figure><p>安装 mdadm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install mdadm<br></code></pre></td></tr></table></figure><p>创建 RAID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mdadm -Cv /dev/md0 -n 10 -l 6 -a yes /dev/sda /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh /dev/sdi /dev/sdj<br></code></pre></td></tr></table></figure><p>mdadm 参数说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">-C：    创建<br>-a：    检测设备<br>-n：    指定设备数量<br>-l：    指定RAID级别<br>-v：    显示过程<br>-f：    模拟设备损坏<br>-r：    移除设备<br>-Q：    查看摘要信息<br>-D：    查看详细信息<br>-S：    停止RAID磁盘阵列<br></code></pre></td></tr></table></figure><p>格式化 RAID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfs.ext4 /dev/md0<br></code></pre></td></tr></table></figure><p>临时挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount /dev/md0 /home/md0/<br></code></pre></td></tr></table></figure><p>永久挂载目录<br>打开 <code>/etc/fstab</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/fstab<br></code></pre></td></tr></table></figure><p>最后一行添加挂载信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/dev/md0 /home/md0 ext4 defaults 0 0<br></code></pre></td></tr></table></figure><p>检查挂载信息是否正确，正确不会输出信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount -a<br></code></pre></td></tr></table></figure><p>重启电脑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown -r now<br></code></pre></td></tr></table></figure><p>显示磁盘使用信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">df -h<br></code></pre></td></tr></table></figure><p>显示 RAID 磁盘阵列信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/mdstat<br></code></pre></td></tr></table></figure><p>显示 RAID 信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mdadm -D /dev/md0<br></code></pre></td></tr></table></figure><h2 id="后期维护"><a href="#后期维护" class="headerlink" title="后期维护"></a>后期维护</h2><p>显示 CPU 温度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $[$(cat /sys/class/thermal/thermal_zone0/temp)/1000]°<br></code></pre></td></tr></table></figure><p>安装 hddtemp </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install hddtemp<br></code></pre></td></tr></table></figure><p>显示所有磁盘温度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hddtemp /dev/sda /dev/sdb /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh /dev/sdi /dev/sdj /dev/sdk /dev/sdl<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>RAID</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从面向过程到面向对象，C 和 C++ 基本语法区别</title>
    <link href="/2021/09/18/%E4%BB%8E%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%88%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8CC-%E5%92%8C-C-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/09/18/%E4%BB%8E%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%88%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8CC-%E5%92%8C-C-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>C 语言是一种通用的编程语言，广泛用于系统软件与应用软件的开发。于1969年至1973年间，为了移植与开发 UNIX 操作系统，由丹尼斯·里奇与肯·汤普逊，以 B 语言为基础，在贝尔实验室设计、开发出来。C++语言在 C 语言的基础上添加了面向对象编程和泛型编程的支持。继承了 C 语言高效，简洁，快速和可移植的传统。是一种被广泛使用的计算机程序设计语言。支持多重编程模式，例如过程化程序设计、数据抽象、面向对象程序设计、泛型程序设计和设计模式等。</p><h4 id="1、头文件："><a href="#1、头文件：" class="headerlink" title="1、头文件："></a>1、头文件：</h4><table><thead><tr><th align="center">C 语言</th><th align="center">C++</th></tr></thead><tbody><tr><td align="center">stdio.h</td><td align="center">iostream</td></tr><tr><td align="center">math.h</td><td align="center">cmath</td></tr><tr><td align="center">string.h</td><td align="center">cstring</td></tr><tr><td align="center">stdlib.h</td><td align="center">cstdlib</td></tr><tr><td align="center">……</td><td align="center">……</td></tr></tbody></table><h4 id="2、命名空间："><a href="#2、命名空间：" class="headerlink" title="2、命名空间："></a>2、命名空间：</h4><p>未使用 std 命名空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span><span class="hljs-comment">//#include &lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;<span class="hljs-comment">//C++</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 std 命名空间后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span><span class="hljs-comment">//#include &lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-comment">//使用 std 命名空间</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<span class="hljs-comment">//C 语言</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span> &lt;&lt; endl;<span class="hljs-comment">//C++</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>using namespace std;</p><p>使用命名空间：using namespace</p><p>std 就是一个命名空间</p><p>cout、endl、cin、就是在 std 这个空间定义命名的。</p><h4 id="3、输入输出："><a href="#3、输入输出：" class="headerlink" title="3、输入输出："></a>3、输入输出：</h4><p>输出：cout &lt;&lt;</p><p>输入：cin &gt;&gt;</p><p>换行：endl</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<span class="hljs-comment">//C 输入</span><br>    cin &gt;&gt; a;<span class="hljs-comment">//C++输入</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<span class="hljs-comment">//C 输出</span><br>    cout &lt;&lt; a &lt;&lt; endl;<span class="hljs-comment">//C++输出</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、基本数据类型："><a href="#4、基本数据类型：" class="headerlink" title="4、基本数据类型："></a>4、基本数据类型：</h4><p>C 和 C++ 的基本数据类型几乎一样。</p><p>int、short、char、float、double、unsigned、signed</p><p>在 C++ 加入了一个布尔类型：bool</p><p>1、bool 类型只有2个常量值： true 真、false 假</p><p>2、实际运行时，true 当做1来处理，false当做0来处理</p><p>3、让代码看上去更直观。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">bool</span> a;<br><br>a = <span class="hljs-literal">true</span>;<span class="hljs-comment">//为真 1</span><br>a = <span class="hljs-literal">false</span>;<span class="hljs-comment">//为假 0</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、结构体："><a href="#5、结构体：" class="headerlink" title="5、结构体："></a>5、结构体：</h4><p>在 C 中，定义一个结构体，类型的 struct 不能省略。</p><p>在 C++ 中，定义一个结构体，类型的 struct 可以省略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>//<span class="hljs-keyword">struct</span>关键字 <span class="hljs-title">Stu</span> 结构名</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> num;<br><span class="hljs-keyword">int</span> age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">c</span>;</span><span class="hljs-comment">//C</span><br>Stu cpp;<span class="hljs-comment">//C++</span><br></code></pre></td></tr></table></figure><h4 id="6、强制类型转换："><a href="#6、强制类型转换：" class="headerlink" title="6、强制类型转换："></a>6、强制类型转换：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> a = <span class="hljs-number">3.8</span>;<br><span class="hljs-keyword">double</span> b = <span class="hljs-number">6.6</span>;<br><span class="hljs-keyword">int</span> c = <span class="hljs-number">30</span>;<br><span class="hljs-keyword">int</span> d;<br><span class="hljs-comment">//强制转换为 int 类型</span><br>d = c + (<span class="hljs-keyword">int</span>)(a*b);<span class="hljs-comment">//C</span><br>d = c + <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(a*b);<span class="hljs-comment">//C++</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、条件运算符："><a href="#7、条件运算符：" class="headerlink" title="7、条件运算符："></a>7、条件运算符：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">15</span>;<br><br>a &gt; b ? a : b;<span class="hljs-comment">//在 C 里面 只能去使用表达式的返回值</span><br>(a &gt; b ? a : b) = <span class="hljs-number">20</span>;<span class="hljs-comment">//在 C++ 里面 可以这样给 b 赋值</span><br>cout &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8、for-循环："><a href="#8、for-循环：" class="headerlink" title="8、for 循环："></a>8、for 循环：</h4><p>C 中：for 循环的循环变量，必须先定义，循环变量的作用域在整个 main 函数里。</p><p>C++ 中：for循环的循环变量，可以在表达式里面定义，循环变量的作用域只在循环里。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//C 的 for 循环</span><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><br>&#125;<br><br>    <span class="hljs-comment">//C++ 的 for 循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9、作用域运算符"><a href="#9、作用域运算符" class="headerlink" title="9、作用域运算符 ::"></a>9、作用域运算符 ::</h4><p>1、区分全局和局部</p><p>2、类的作用域。</p><p>3、命名空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">50</span>;<br><br>cout &lt;&lt; a &lt;&lt; endl;<span class="hljs-comment">//输出局部变量 a</span><br>cout &lt;&lt; ::a &lt;&lt; endl;<span class="hljs-comment">//输出全局变量 a</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10、动态内存分配："><a href="#10、动态内存分配：" class="headerlink" title="10、动态内存分配："></a>10、动态内存分配：</h4><table><thead><tr><th align="center">编程语言</th><th align="center">开辟内存</th><th align="center">释放内存</th><th align="center">方式</th></tr></thead><tbody><tr><td align="center">C</td><td align="center">malloc</td><td align="center">free</td><td align="center">函数</td></tr><tr><td align="center">C++</td><td align="center">new</td><td align="center">delete</td><td align="center">运算符</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> *p1, *p2, *p3;<br>p1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<span class="hljs-comment">//p1指向一个 int 空间</span><br>p2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//p2指向一个5个整形元素的数组 首地址</span><br>p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-number">5</span>);<span class="hljs-comment">//p3指向一个 int 空间 空间初始化为5</span><br><br><span class="hljs-comment">//释放空间</span><br><span class="hljs-keyword">delete</span> p1;<br><span class="hljs-keyword">delete</span>[]p2;<br><span class="hljs-keyword">delete</span> p3;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11、变量的引用："><a href="#11、变量的引用：" class="headerlink" title="11、变量的引用："></a>11、变量的引用：</h4><p>1、变量的引用是 C++ 重要的扩充</p><p>2、作用：给一个变量取别名，变量和别名共享这块内存。</p><p>3、声明一个引用，并不会开辟空间。</p><p>4、声明引用的时候，一定要初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a;<span class="hljs-comment">//定义 a</span><br><span class="hljs-keyword">int</span> &amp;b = a;<span class="hljs-comment">//b 是 a 的引用 a 和 b 共享一个内存。</span><br><br>a = <span class="hljs-number">10</span>;<br>cout &lt;&lt; b &lt;&lt; endl;<span class="hljs-comment">//b = 10</span><br><br>b = <span class="hljs-number">15</span>;<br>cout &lt;&lt; a &lt;&lt; endl;<span class="hljs-comment">//a = 15</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>传递的形参交换，不会影响到实参，所以输出 x = 10，y = 20</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//定义函数，用来交换2个数的值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> t = a;<br>a = b;<br>b = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">Swap</span>(x, y);<br><br>cout &lt;&lt;<span class="hljs-string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;<span class="hljs-comment">//x = 10</span><br>cout &lt;&lt;<span class="hljs-string">&quot;y = &quot;</span> &lt;&lt; y &lt;&lt; endl;<span class="hljs-comment">//y = 20</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用指针的方式来使实参交换(比引用的方式增加了内存的开销)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//定义函数，用来交换2个数的值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *pa, <span class="hljs-keyword">int</span> *pb)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> t = *pa;<br>*pa = *pb;<br>*pb = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">Swap</span>(&amp;x, &amp;y);<br><br>cout &lt;&lt;<span class="hljs-string">&quot;x= &quot;</span> &lt;&lt; x &lt;&lt; endl;<span class="hljs-comment">//x = 20</span><br>cout &lt;&lt;<span class="hljs-string">&quot;y= &quot;</span> &lt;&lt; y &lt;&lt; endl;<span class="hljs-comment">//y = 10</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用引用的方式来使实参交换(比指针的方式节省了内存的开销)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//定义函数，用来交换2个数的值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> t = x;<br>x = y;<br>y = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">Swap</span>(x, y);<span class="hljs-comment">//节省了在函数中的内存开销</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;x= &quot;</span> &lt;&lt; x &lt;&lt; endl;<span class="hljs-comment">//x = 20</span><br>cout &lt;&lt; <span class="hljs-string">&quot;y= &quot;</span> &lt;&lt; y &lt;&lt; endl;<span class="hljs-comment">//y = 10</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12、内置函数、内联函数："><a href="#12、内置函数、内联函数：" class="headerlink" title="12、内置函数、内联函数："></a>12、内置函数、内联函数：</h4><p>C 中的宏函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//宏函数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FUN(a,b)(a*b+a/b)<span class="hljs-comment">//预处理：得到.i文件 - 汇编：得到.S - 编译：得到.obj - 链接 得到.exe</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">int</span> a = <span class="hljs-built_in">FUN</span>(x, y);<br>cout &lt;&lt; a &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 内置函数，内联函数</p><p>关键字：inline</p><p>编译过程中，将所调用的函数代码直接嵌入到主调函数中。</p><p>1、内置函数可以节省运行时间，但是会增加目标代码的长度。</p><p>2、在使用内置函数的时候，尽可能的使用5行以内，经常出现的函数。</p><p>3、不能包含复杂的语句：循环、switch等。</p><p>4、inline 比较灵活，并不是一个指令性的关键字。</p><p>​        inline 只是程序员对编译系统的一种建议，不一定被采纳。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//内置函数/内联函数 返回3个数的最大值</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">if</span> (c &gt; a)a = c;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">int</span> z = <span class="hljs-number">18</span>;<br><br><span class="hljs-keyword">int</span> max;<br>max = <span class="hljs-built_in">Max</span>(x, y, z);<br><br>cout &lt;&lt; max &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13、带默认参数的函数："><a href="#13、带默认参数的函数：" class="headerlink" title="13、带默认参数的函数："></a>13、带默认参数的函数：</h4><p>声明函数的时候，可以给形参初始化一个默认值，调用的时候，如果没有具体的实际参数，就使用默认值进行计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">15</span>, <span class="hljs-keyword">int</span> c = <span class="hljs-number">18</span>)</span><span class="hljs-comment">//a、b、c、自带默认参数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">if</span> (c &gt; a)a = c;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">50</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">60</span>;<br><span class="hljs-keyword">int</span> z = <span class="hljs-number">80</span>;<br><br>cout &lt;&lt; <span class="hljs-built_in">Max</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(x) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(x,y) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(x, y, z) &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="14、函数的重载："><a href="#14、函数的重载：" class="headerlink" title="14、函数的重载："></a>14、函数的重载：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">if</span> (c &gt; a)a = c;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">float</span> a, <span class="hljs-keyword">float</span> b, <span class="hljs-keyword">float</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">if</span> (c &gt; a)a = c;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b, <span class="hljs-keyword">double</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">if</span> (c &gt; a)a = c;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">3.6f</span>, <span class="hljs-number">3.8f</span>, <span class="hljs-number">4.9f</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">6.6</span>, <span class="hljs-number">8.98</span>, <span class="hljs-number">7.20</span>) &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1、函数名相同，参数的个数、类型、顺序不一样。</p><p>2、在调用的时候，根据给的实际参数取自动匹配需要用到的某一个重载函数。</p><p>3、返回值类型并不能决定这是不是函数重载。</p><p>4、参数的个数、类型、顺序至少需要一个不一样。</p><p>5、函数重载会和带默认参数的函数起冲突。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c = <span class="hljs-number">18</span>)</span></span>;<span class="hljs-comment">//有歧义</span><br></code></pre></td></tr></table></figure><h4 id="15、函数的模板"><a href="#15、函数的模板" class="headerlink" title="15、函数的模板"></a>15、函数的模板</h4><p>重载函数如果过多，编写和阅读都会很繁琐，可以使用模板来代替，将数据类型参数化：</p><p>1、建立一个通用的函数，函数的类型和参数的类型可以不指定，使用一种虚拟的类型。</p><p>2、凡是函数体相同的多个函数，都可以使用函数模板。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//函数模板的声明</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Ty&gt;<span class="hljs-comment">//Ty 虚拟的数据类型</span><br><br><span class="hljs-comment">//定义</span><br><span class="hljs-function">Ty <span class="hljs-title">Max</span><span class="hljs-params">(Ty a, Ty b, Ty c)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (b &gt; a)a = b;<br><span class="hljs-keyword">if</span> (c &gt; a)a = c;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">3.6f</span>, <span class="hljs-number">3.8f</span>, <span class="hljs-number">4.9f</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">Max</span>(<span class="hljs-number">6.6</span>, <span class="hljs-number">8.98</span>, <span class="hljs-number">7.20</span>) &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GII中文GIT命令</title>
    <link href="/2021/09/16/GII%E4%B8%AD%E6%96%87GIT%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/09/16/GII%E4%B8%AD%E6%96%87GIT%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GII 是基于 C++ 开发的 GIT 中文命令程序，安装后可以使用中文命令替代 GIT 命令，首发1.0版本包含了大量常用的 GIT 命令，支持 Windows 和 Linux 操作系统。GII 依赖于 GIT，使用前需要先安装 GIT。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li><p><strong>2021年10月6日：</strong></p><ul><li>更新 <code>gii v1.0.1</code></li><li>优化修改大量代码</li></ul></li><li><p><strong>2021年9月16日：</strong></p><ul><li>发布首个版本 <code>gii v1.0</code> 包括 Windows 和 Linux 的两个版本</li></ul></li></ul><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><h3 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h3><ul><li><a href="https://cdn.chziyue.com/app/gii/Windows/gii.exe">点击下载 GII</a></li><li>将 gii.exe 拷贝到 GIT 安装目录下的 cmd 目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> git 默认安装目录</span><br>C:\Program Files\Git\cmd<br></code></pre></td></tr></table></figure></li><li>推荐使用 CMD 命令提示符来操作，可以更好的支持中文编码</li></ul><h3 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h3><ul><li>进入 <code>/usr/local/bin/</code> 目录：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/bin/<br></code></pre></td></tr></table></figure></li><li>下载 GII:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://gitee.com/chziyue/doc/raw/master/gii<br></code></pre></td></tr></table></figure></li><li>为 gii 添加可执行权限:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x gii<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h2><h3 id="中英文命令对照表："><a href="#中英文命令对照表：" class="headerlink" title="中英文命令对照表："></a>中英文命令对照表：</h3><table><thead><tr><th align="center"><strong>中文命令</strong></th><th align="center"><strong>英文命令</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">gii 帮助</td><td align="center">gii -h</td><td align="center">显示帮助信息</td></tr><tr><td align="center">gii 版本</td><td align="center">gii -v</td><td align="center">显示 gii 版本</td></tr><tr><td align="center">gii 状态</td><td align="center">git status</td><td align="center">显示工作区状态</td></tr><tr><td align="center">gii 显示分支</td><td align="center">git branch</td><td align="center">显示本地分支</td></tr><tr><td align="center">gii 显示远程分支</td><td align="center">git branch -r</td><td align="center">显示远程分支</td></tr><tr><td align="center">gii 显示所有分支</td><td align="center">git branch -a</td><td align="center">显示本地和远程所有分支</td></tr><tr><td align="center">gii 日志</td><td align="center">git log</td><td align="center">显示仓库日志</td></tr><tr><td align="center">gii 入库日志</td><td align="center">git log –graph –pretty=format:”%h %s” now</td><td align="center">显示仓库日志(只显示 id 和版本)</td></tr><tr><td align="center">gii 退库日志</td><td align="center">git reflog</td><td align="center">显示回退掉的仓库日志</td></tr><tr><td align="center">gii 初始化</td><td align="center">git init</td><td align="center">初始化仓库</td></tr><tr><td align="center">gii 克隆 地址</td><td align="center">git clone 地址</td><td align="center">克隆仓库到一个新目录址</td></tr><tr><td align="center">gii 存档</td><td align="center">git add</td><td align="center">添加文件内容到索引(无参数默认为所有文件)</td></tr><tr><td align="center">gii 退档</td><td align="center">git reset HEAD</td><td align="center">回退添加的索引(无参数默认为所有文件)</td></tr><tr><td align="center">gii 入库</td><td align="center">git commit -m</td><td align="center">提交变更到仓库(需要附带参数 版本说明)</td></tr><tr><td align="center">gii 退库</td><td align="center">git reset –hard</td><td align="center">回退仓库到指定版本(需要附带参数 版本id)</td></tr><tr><td align="center">gii 提交</td><td align="center">git push</td><td align="center">将当前内容提交到远程仓库</td></tr><tr><td align="center">gii 新建分支 分支名</td><td align="center">git branch 分支名</td><td align="center">创建分支</td></tr><tr><td align="center">gii 切换分支 分支名</td><td align="center">git checkout 分支名</td><td align="center">切换到指定分支</td></tr><tr><td align="center">gii 删除分支 分支名</td><td align="center">git branch -d 分支名</td><td align="center">删除指定分支</td></tr><tr><td align="center">gii 合并 仓库id</td><td align="center">git rebase -i 仓库id</td><td align="center">合并版本库</td></tr><tr><td align="center">gii 合并分支 分支名</td><td align="center">git merge 分支名</td><td align="center">将指定分支合并到当前分支</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>原创程序发布</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>原创</tag>
      
      <tag>GII</tag>
      
      <tag>Git</tag>
      
      <tag>Linux</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 容器数据卷</title>
    <link href="/2021/09/15/Docker-%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <url>/2021/09/15/Docker-%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-容器数据卷"><a href="#Docker-容器数据卷" class="headerlink" title="Docker 容器数据卷"></a>Docker 容器数据卷</h3><h4 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h4><p>将应用和环境打包成一个镜像，如果数据都在容器中，删除容器，数据就会丢失。容器之间可以有一个数据共享的技术，使 Docker 容器中产生的数据，同步到本地。这就是卷技术，目录的挂载，将容器内的目录，挂载到 Linux 上面。</p><p><strong>容器的持久化和同步操作，容器间也是可以数据共享的</strong></p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><p class="note note-info">可直接使用命令 -v 来挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -v 主机目录:容器目录<br><br>//测试 把容器内的 home 目录 挂载到主机的 /home/test 目录<br>[root@bogon home]# docker run -it -d -v /home/test:/home centos<br><br>//主机 home 目录下已经有了 test 目录<br>[root@bogon home]# ls<br>chziyue  dockerfile  gitea  test<br><br>//查看容器信息<br>[root@bogon home]# docker inspect 6930ea3963d8<br><br>//在 Mounts 里已经有了挂载信息<br>&quot;Mounts&quot;: [<br>            &#123;<br>                &quot;Type&quot;: &quot;bind&quot;,<br>                &quot;Source&quot;: &quot;/home/test&quot;,//主机内地址<br>                &quot;Destination&quot;: &quot;/home&quot;,//容器内地址<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;rprivate&quot;<br>            &#125;<br></code></pre></td></tr></table></figure><p class="note note-info">进入容器内 home 目录新建一个 index.html 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon home]# docker attach 6930ea3963d8//进入到容器内<br>[root@6930ea3963d8 /]# cd /home/<br>[root@6930ea3963d8 home]# ls<br>[root@6930ea3963d8 home]# touch index.html<br></code></pre></td></tr></table></figure><p class="note note-info">在主机的 home/test 目录下查看，发现在容器内新建的 index.html 文件已经有了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon home]# cd /home/test/<br>[root@bogon test]# ls<br>index.html<br></code></pre></td></tr></table></figure><p class="note note-info">停止容器，在主机的 home/test 目录下新建一个 index.php 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker stop 6930ea3963d8//停止容器<br>[root@bogon test]# touch index.php<br></code></pre></td></tr></table></figure><p class="note note-info">启动容器，在容器内 home 目录下查看，发现容器也会自动同步到这个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker start 6930ea3963d8//启动容器<br>6930ea3963d8<br>[root@bogon test]# docker attach 6930ea3963d8//进入到容器内<br>[root@6930ea3963d8 /]# cd /home/<br>[root@6930ea3963d8 home]# ls<br>index.html<br></code></pre></td></tr></table></figure><p class="note note-info">如果将容器删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker stop 6930ea3963d8//停止容器<br>6930ea3963d8<br>[root@bogon test]# docker rm -f 6930ea3963d8//删除容器<br>6930ea3963d8<br>[root@bogon test]# ls<br>index.html  index.php<br></code></pre></td></tr></table></figure><p>发现，挂载到本地的数据卷依旧没有丢失，里面的文件都还在，这就实现了容器数据持久化功能！</p><h4 id="匿名挂载和具名挂载"><a href="#匿名挂载和具名挂载" class="headerlink" title="匿名挂载和具名挂载"></a>匿名挂载和具名挂载</h4><p><strong>匿名挂载</strong></p><p class="note note-info">-v 后面只写容器内路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker run -d -P --name nginx01 -v /etc/nginx nginx<br>bcca30117a31c7501fe72c4b8919af6381d5cb3fa62a1f3b103a38350e20b3e3<br></code></pre></td></tr></table></figure><p>查看 <code>docker volume --help</code> 帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker volume --help<br><br>Usage:  docker volume COMMAND<br><br>Manage volumes<br><br>Commands:<br>  create      Create a volume//创建一个卷<br>  inspect     Display detailed information on one or more volumes//显示一个或多个卷的详细信息<br>  ls          List volumes//查看所有卷<br>  prune       Remove all unused local volumes//删除所有未使用的卷<br>  rm          Remove one or more volumes//删除一个或多个卷<br><br>Run &#x27;docker volume COMMAND --help&#x27; for more information on a command.<br><br></code></pre></td></tr></table></figure><p class="note note-info">查看所有卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     81da19700cdd76d6020971290842c61662cc73c1f6445b8a4a6e67224e36352d<br>//这种就是匿名挂载，-v 只写了容器内的路径，没有写容器外的路径<br></code></pre></td></tr></table></figure><p><strong>具名挂载</strong></p><p class="note note-info">通过 -v 卷名:容器内路径来实现具名挂载</p><p>在启动一个 nginx 使用具名挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx<br>0533a600af76366da29b8116168aa506bc9297b8270beedda15ab9e79c0179f1<br>[root@bogon test]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     81da19700cdd76d6020971290842c61662cc73c1f6445b8a4a6e67224e36352d<br>local     juming-nginx<br></code></pre></td></tr></table></figure><p>使用 <code>docker inspect</code> 查看挂载的位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# docker inspect juming-nginx<br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2021-09-15T22:19:34+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;,//挂载的目录<br>        &quot;Name&quot;: &quot;juming-nginx&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><blockquote><p>所有 docker 容器内的卷，如果没有指定主机目录，都会挂载到 <code>/var/lib/docker/volumes/</code> 目录下</p></blockquote><p>进入到 <code>/var/lib/docker/volumes/</code> 目录下看一看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon test]# cd /var/lib/docker/volumes/<br>[root@bogon volumes]# ls<br>81da19700cdd76d6020971290842c61662cc73c1f6445b8a4a6e67224e36352d  backingFsBlockDev  juming-nginx  metadata.db<br></code></pre></td></tr></table></figure><p>进入到 <code>juming-nginx</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon volumes]# cd juming-nginx/<br>[root@bogon juming-nginx]# ls<br>_data<br>[root@bogon juming-nginx]# cd _data/<br>[root@bogon _data]# ls<br>conf.d  fastcgi_params  mime.types  modules  nginx.conf  scgi_params  uwsgi_params<br>//进去后看到了 nginx 的配置文件<br></code></pre></td></tr></table></figure><p class="note note-info">通过具名挂载可以方便的找到我们挂载的卷，大多数情况下都会使用这种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">//如何分辨是具名挂载还是匿名挂载，还是指定路径挂载？<br>-v 容器内路径  //匿名挂载<br>-v 卷名:容器内路径  //具名挂载<br>-v /主机路径:容器内路径 //指定路径挂载<br></code></pre></td></tr></table></figure><p><strong>设置容器对挂载目录的权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">//通过 -v 容器内路径:ro rw 改变读写权限<br>roreadonly//只读<br>rwreadwrite//可读可写<br><br>//如果设置了容器权限，容器对挂载出来的目录就有了限定了<br>[root@bogon test]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx<br>[root@bogon test]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx<br>// 如果附加了 ro 就说明这个路径只能通过主机来修改，容器内部只能读取，无法修改<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker的安装与常用的命令</title>
    <link href="/2021/09/13/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/09/13/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Docker 是一个开放源代码软件，是一个开放平台，用于开发应用、交付（shipping）应用、运行应用。 Docker允许用户将基础设施（Infrastructure）中的应用单独分割出来，形成更小的颗粒（容器），从而提高交付软件的速度。</p><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><blockquote><p>准备环境</p></blockquote><p>1、CentOS 7<br>2、使用 Xshell 连接远程服务器操作  </p><blockquote><p>环境查看</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@bogon ~]<span class="hljs-comment"># uname -r</span><br><span class="hljs-number">3.10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1160</span>.el7.x86_64 <span class="hljs-regexp">//</span>系统内核是 <span class="hljs-number">3.10</span> 以上<br></code></pre></td></tr></table></figure><p>系统版本</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@bogon /]</span><span class="hljs-comment"># cat /etc/os-release </span><br><span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;CentOS Linux&quot;</span><br><span class="hljs-attr">VERSION</span>=<span class="hljs-string">&quot;7 (Core)&quot;</span><br><span class="hljs-attr">ID</span>=<span class="hljs-string">&quot;centos&quot;</span><br><span class="hljs-attr">ID_LIKE</span>=<span class="hljs-string">&quot;rhel fedora&quot;</span><br><span class="hljs-attr">VERSION_ID</span>=<span class="hljs-string">&quot;7&quot;</span><br><span class="hljs-attr">PRETTY_NAME</span>=<span class="hljs-string">&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="hljs-attr">ANSI_COLOR</span>=<span class="hljs-string">&quot;0;31&quot;</span><br><span class="hljs-attr">CPE_NAME</span>=<span class="hljs-string">&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="hljs-attr">HOME_URL</span>=<span class="hljs-string">&quot;https://www.centos.org/&quot;</span><br><span class="hljs-attr">BUG_REPORT_URL</span>=<span class="hljs-string">&quot;https://bugs.centos.org/&quot;</span><br><br><span class="hljs-attr">CENTOS_MANTISBT_PROJECT</span>=<span class="hljs-string">&quot;CentOS-7&quot;</span><br><span class="hljs-attr">CENTOS_MANTISBT_PROJECT_VERSION</span>=<span class="hljs-string">&quot;7&quot;</span><br><span class="hljs-attr">REDHAT_SUPPORT_PRODUCT</span>=<span class="hljs-string">&quot;centos&quot;</span><br><span class="hljs-attr">REDHAT_SUPPORT_PRODUCT_VERSION</span>=<span class="hljs-string">&quot;7&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><p>根据官网提供的帮助文档操作：<br>1、卸载旧的版本</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">yum remove docker <span class="hljs-string">\</span><br>                docker-client <span class="hljs-string">\</span><br>                docker-client-latest <span class="hljs-string">\</span><br>                docker-common <span class="hljs-string">\</span><br>                docker-latest <span class="hljs-string">\</span><br>                docker-latest-logrotate <span class="hljs-string">\</span><br>                docker-logrotate <span class="hljs-string">\</span><br>                docker-engine<br></code></pre></td></tr></table></figure><p>2、需要的安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br></code></pre></td></tr></table></figure><p>3、设置镜像的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo //官网提供的是国外的仓库速度比较慢<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo //我这里使用阿里云的，速度会快很多<br></code></pre></td></tr></table></figure><p>更新 yum 软件包索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum makecache fast<br></code></pre></td></tr></table></figure><p>4、 安装dokcer相关的  docker-ce 社区版  docker-ee 企业版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>5、使用 <code>docker version</code> 查看 docker 版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon /]# docker version<br>Client: Docker Engine - Community<br> Version:           20.10.8<br> API version:       1.41<br> Go version:        go1.16.6<br> Git commit:        3967b7d<br> Built:             Fri Jul 30 19:55:49 2021<br> OS/Arch:           linux/amd64<br> Context:           default<br> Experimental:      true<br><br>Server: Docker Engine - Community<br> Engine:<br>  Version:          20.10.8<br>  API version:      1.41 (minimum version 1.12)<br>  Go version:       go1.16.6<br>  Git commit:       75249d8<br>  Built:            Fri Jul 30 19:54:13 2021<br>  OS/Arch:          linux/amd64<br>  Experimental:     false<br> containerd:<br>  Version:          1.4.9<br>  GitCommit:        e25210fe30a0a703442421b0f60afac609f950a3<br> runc:<br>  Version:          1.0.1<br>  GitCommit:        v1.0.1-0-g4144b63<br> docker-init:<br>  Version:          0.19.0<br>  GitCommit:        de40ad0<br></code></pre></td></tr></table></figure><p>6、启动 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure><p>查看 docker 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version<br></code></pre></td></tr></table></figure><p>重启 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><p>关闭 docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop docker<br></code></pre></td></tr></table></figure><p>7、<code>hello-world</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run hello-world<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker run hello-world<br>Unable to find image &#x27;hello-world:latest&#x27; locally<br>latest: Pulling from library/hello-world<br>b8dfde127a29: Pull complete <br>Digest: sha256:7d91b69e04a9029b99f3585aaaccae2baa80bcf318f4a5d2165a9898cd2dc0a1<br>Status: Downloaded newer image for hello-world:latest<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image which runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, which sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br><span class="hljs-meta"> $</span><span class="bash"> docker run -it ubuntu bash</span><br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><p>8、查看下载的 <code>hello-world</code> 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    d1165f221234   6 months ago   13.3kB<br></code></pre></td></tr></table></figure><blockquote><p>卸载 docker</p></blockquote><p>1、卸载依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum remove docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>2、删除资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /var/lib/docker<br>rm -rf /var/lib/containerd<br></code></pre></td></tr></table></figure><h3 id="docker-的常用命令"><a href="#docker-的常用命令" class="headerlink" title="docker 的常用命令"></a>docker 的常用命令</h3><p>帮助命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version       //显示docker的版本信息<br>docker info          //显示docker的系统信息，包括镜像和容器的数量<br>docker 命令 --help   //帮助命令<br></code></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><p><strong>docker images 查看所有本地主机上的镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    d1165f221234   6 months ago   13.3kB<br><br>//解释<br>REPOSITORY   //镜像的仓库源<br>TAG          //镜像的标签<br>IMAGE ID     //镜像的id<br>CREATED      //镜像的创建时间<br>SIZE         //镜像的大小<br><br>//可选项<br>-a, --all    //列出所有镜像<br>-q, --quiet  //只显示镜像的id<br></code></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker search mysql<br>NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql                             MySQL is a widely used, open-source relation…   11409     [OK]       <br>mariadb                           MariaDB Server is a high performing open sou…   4334      [OK]       <br></code></pre></td></tr></table></figure><p>可选项，通过搜藏来过滤 <code>--filter==STARS=3000</code> 搜索出来的镜像就是STARS大于3000的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker search mysql --filter=stars=3000<br>NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql     MySQL is a widely used, open-source relation…   11409     [OK]       <br>mariadb   MariaDB Server is a high performing open sou…   4334      [OK]       <br>[root@bogon chziyue]# docker search mysql --filter=stars=5000<br>NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED<br>mysql     MySQL is a widely used, open-source relation…   11409     [OK]     <br></code></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">//下载镜像 docker pull 镜像名[:tag]<br>[root@bogon chziyue]# docker pull mysql<br>Using default tag: latest<br>latest: Pulling from library/mysql<br>a330b6cecb98: Pull complete     //分层下载，kocker iamge 的核心 联合文件系统<br>9c8f656c32b8: Pull complete <br>88e473c3f553: Pull complete <br>062463ea5d2f: Pull complete <br>daf7e3bdf4b6: Pull complete <br>1839c0b7aac9: Pull complete <br>cf0a0cfee6d0: Pull complete <br>1b42041bb11e: Pull complete <br>10459d86c7e6: Pull complete <br>b7199599d5f9: Pull complete <br>1d6f51e17d45: Pull complete <br>50e0789bacad: Pull complete <br>Digest: sha256:99e0989e7e3797cfbdb8d51a19d32c8d286dd8862794d01a547651a896bcf00c //签名<br>Status: Downloaded newer image for mysql:latest<br>docker.io/library/mysql:latest //真实地址<br></code></pre></td></tr></table></figure><p>两条命令效果是一样的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql<br>docker pull docker.io/library/mysql:latest<br></code></pre></td></tr></table></figure><p>指定版本下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker pull mysql:5.7<br>5.7: Pulling from library/mysql<br>a330b6cecb98: Already exists <br>9c8f656c32b8: Already exists <br>88e473c3f553: Already exists <br>062463ea5d2f: Already exists <br>daf7e3bdf4b6: Already exists <br>1839c0b7aac9: Already exists <br>cf0a0cfee6d0: Already exists <br>fae7a809788c: Pull complete <br>dae5a82a61f0: Pull complete <br>7063da9569eb: Pull complete <br>51a9a9b4ef36: Pull complete <br>Digest: sha256:d9b934cdf6826629f8d02ea01f28b2c4ddb1ae27c32664b14867324b3e5e1291<br>Status: Downloaded newer image for mysql:5.7<br>docker.io/library/mysql:5.7<br></code></pre></td></tr></table></figure><p>查看下载的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>mysql         5.7       1d7aba917169   10 days ago    448MB<br>mysql         latest    0716d6ebcc1a   10 days ago    514MB<br>hello-world   latest    d1165f221234   6 months ago   13.3kB<br></code></pre></td></tr></table></figure><p><strong>docker rmi 删除镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker rmi -f 镜像id                     //删除指定的镜像<br>[root@bogon chziyue]# docker rmi -f 镜像id 镜像id 镜像id 镜像id //删除多个镜像<br>[root@bogon chziyue]# docker rmi -f $(docker images -aq)      //删除全部的镜像<br></code></pre></td></tr></table></figure><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><p>说明：有了镜像才可以创建容器，linux，下载一个 centos 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull centos<br></code></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [可选参数] image<br><br>//参数说明<br>--name=&quot;Name&quot;   容器名字 tomcat01 tomcat02，用来区分容器<br>-d              后台方式运行<br>-it             使用交互方式运行，进入容器查看内容<br>-p              指定容器的端口 -p 8080:8080<br>    -p ip:主机端口:容器端口<br>    -p 主机端口:容器端口 (常用)<br>    -p 容器端口<br>    容器端口<br>-P              随机指定端口<br></code></pre></td></tr></table></figure><p>测试，启动进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@bogon chziyue]# docker run -it centos /bin/bash<br>[root@3000d155ddf7 /]# ls //查看容器内的目录<br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br></code></pre></td></tr></table></figure><p>从容器中退回主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@3000d155ddf7 /]# exit<br>exit<br>[root@bogon /]# ls<br>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br></code></pre></td></tr></table></figure><p>列出所有运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps     //列出当前正在运行的容器<br>-a            //列出当前正在运行的容器+历史运行过的容器<br>-n=?          //显示最近创建的容器<br>-q            //只显示容器的编号<br><br>[root@bogon /]# docker ps<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>[root@bogon /]# docker ps -a<br>CONTAINER ID   IMAGE          COMMAND       CREATED             STATUS                          PORTS     NAMES<br>3000d155ddf7   centos         &quot;/bin/bash&quot;   3 minutes ago       Exited (0) About a minute ago             kind_mccarthy<br>005725a350d3   d1165f221234   &quot;/hello&quot;      About an hour ago   Exited (0) About an hour ago              practical_ritchie<br></code></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit    //容器停止并退出<br>Ctrl + P + Q    //容器不停止退出<br></code></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm 容器id                 //删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -f<br>docker rm -f $(docker ps -aq)    //删除所有的容器<br>docker ps -a -q|xargs docker rm  //删除所有的容器<br></code></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start 容器id     //启动容器<br>docker restart 容器id   //重启容器<br>docker stop 容器id      //停止当前正在运行的容器<br>docker kill 容器id      //强制停止当前容器<br></code></pre></td></tr></table></figure><h4 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h4><p>后台启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">//docker run -d 镜像名<br>[root@bogon /]# docker run -d centos<br><br>//docker ps, 发现 centos 停止了<br>//说明：docker 容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止<br>//nginx 容器启动后，发现自己没有提供服务，就会立刻停止<br></code></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -tf --tail 容器<br><br>//编写一段 shell 脚本来产生日志<br>//创建一个 while 循环，每隔1秒输出一句 Hello<br>//启动并执行 shell 脚本<br>[root@bogon /]# docker run -d centos /bin/sh -c &quot;while true;do echo Hello;sleep 1;done&quot;<br>30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362<br><br>//查看运行中的镜像<br>[root@bogon /]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES<br>30b9e1d3e0e1   centos    &quot;/bin/sh -c &#x27;while t…&quot;   5 seconds ago   Up 4 seconds             bold_jemison<br><br>//显示日志<br>-tf             //显示日志<br>--tail number   //要显示日志的条数<br>[root@bogon /]# docker logs -tf --tail 10 30b9e1d3e0e1<br>2021-09-13T13:38:15.454797542Z Hello<br>2021-09-13T13:38:16.460296968Z Hello<br>2021-09-13T13:38:17.465308111Z Hello<br>2021-09-13T13:38:18.471366290Z Hello<br>2021-09-13T13:38:19.475148265Z Hello<br>2021-09-13T13:38:20.478896705Z Hello<br>2021-09-13T13:38:21.485814153Z Hello<br>2021-09-13T13:38:22.489167933Z Hello<br>2021-09-13T13:38:23.492039723Z Hello<br>2021-09-13T13:38:24.498429851Z Hello<br></code></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">//docker top 容器id<br>[root@bogon /]# docker top 30b9e1d3e0e1<br>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD<br>root                5226                5207                0                   21:37               ?                   00:00:00            /bin/sh -c while true;do echo Hello;sleep 1;done<br>root                6036                5226                0                   21:47               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1<br></code></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><code class="hljs shell">//docker inspect 容器id<br><br>//测试<br>[root@bogon /]# docker inspect 30b9e1d3e0e1<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362&quot;,<br>        &quot;Created&quot;: &quot;2021-09-13T13:37:02.838337914Z&quot;,<br>        &quot;Path&quot;: &quot;/bin/sh&quot;,<br>        &quot;Args&quot;: [<br>            &quot;-c&quot;,<br>            &quot;while true;do echo Hello;sleep 1;done&quot;<br>        ],<br>        &quot;State&quot;: &#123;<br>            &quot;Status&quot;: &quot;running&quot;,<br>            &quot;Running&quot;: true,<br>            &quot;Paused&quot;: false,<br>            &quot;Restarting&quot;: false,<br>            &quot;OOMKilled&quot;: false,<br>            &quot;Dead&quot;: false,<br>            &quot;Pid&quot;: 5226,<br>            &quot;ExitCode&quot;: 0,<br>            &quot;Error&quot;: &quot;&quot;,<br>            &quot;StartedAt&quot;: &quot;2021-09-13T13:37:03.113992667Z&quot;,<br>            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;<br>        &#125;,<br>        &quot;Image&quot;: &quot;sha256:300e315adb2f96afe5f0b2780b87f28ae95231fe3bdd1e16b9ba606307728f55&quot;,<br>        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362/resolv.conf&quot;,<br>        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362/hostname&quot;,<br>        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362/hosts&quot;,<br>        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362/30b9e1d3e0e154e206cb8820c344e19f4cbb0020d147f3a9d35db5659f488362-json.log&quot;,<br>        &quot;Name&quot;: &quot;/bold_jemison&quot;,<br>        &quot;RestartCount&quot;: 0,<br>        &quot;Driver&quot;: &quot;overlay2&quot;,<br>        &quot;Platform&quot;: &quot;linux&quot;,<br>        &quot;MountLabel&quot;: &quot;&quot;,<br>        &quot;ProcessLabel&quot;: &quot;&quot;,<br>        &quot;AppArmorProfile&quot;: &quot;&quot;,<br>        &quot;ExecIDs&quot;: null,<br>        &quot;HostConfig&quot;: &#123;<br>            &quot;Binds&quot;: null,<br>            &quot;ContainerIDFile&quot;: &quot;&quot;,<br>            &quot;LogConfig&quot;: &#123;<br>                &quot;Type&quot;: &quot;json-file&quot;,<br>                &quot;Config&quot;: &#123;&#125;<br>            &#125;,<br>            &quot;NetworkMode&quot;: &quot;default&quot;,<br>            &quot;PortBindings&quot;: &#123;&#125;,<br>            &quot;RestartPolicy&quot;: &#123;<br>                &quot;Name&quot;: &quot;no&quot;,<br>                &quot;MaximumRetryCount&quot;: 0<br>            &#125;,<br>            &quot;AutoRemove&quot;: false,<br>            &quot;VolumeDriver&quot;: &quot;&quot;,<br>            &quot;VolumesFrom&quot;: null,<br>            &quot;CapAdd&quot;: null,<br>            &quot;CapDrop&quot;: null,<br>            &quot;CgroupnsMode&quot;: &quot;host&quot;,<br>            &quot;Dns&quot;: [],<br>            &quot;DnsOptions&quot;: [],<br>            &quot;DnsSearch&quot;: [],<br>            &quot;ExtraHosts&quot;: null,<br>            &quot;GroupAdd&quot;: null,<br>            &quot;IpcMode&quot;: &quot;private&quot;,<br>            &quot;Cgroup&quot;: &quot;&quot;,<br>            &quot;Links&quot;: null,<br>            &quot;OomScoreAdj&quot;: 0,<br>            &quot;PidMode&quot;: &quot;&quot;,<br>            &quot;Privileged&quot;: false,<br>            &quot;PublishAllPorts&quot;: false,<br>            &quot;ReadonlyRootfs&quot;: false,<br>            &quot;SecurityOpt&quot;: null,<br>            &quot;UTSMode&quot;: &quot;&quot;,<br>            &quot;UsernsMode&quot;: &quot;&quot;,<br>            &quot;ShmSize&quot;: 67108864,<br>            &quot;Runtime&quot;: &quot;runc&quot;,<br>            &quot;ConsoleSize&quot;: [<br>                0,<br>                0<br>            ],<br>            &quot;Isolation&quot;: &quot;&quot;,<br>            &quot;CpuShares&quot;: 0,<br>            &quot;Memory&quot;: 0,<br>            &quot;NanoCpus&quot;: 0,<br>            &quot;CgroupParent&quot;: &quot;&quot;,<br>            &quot;BlkioWeight&quot;: 0,<br>            &quot;BlkioWeightDevice&quot;: [],<br>            &quot;BlkioDeviceReadBps&quot;: null,<br>            &quot;BlkioDeviceWriteBps&quot;: null,<br>            &quot;BlkioDeviceReadIOps&quot;: null,<br>            &quot;BlkioDeviceWriteIOps&quot;: null,<br>            &quot;CpuPeriod&quot;: 0,<br>            &quot;CpuQuota&quot;: 0,<br>            &quot;CpuRealtimePeriod&quot;: 0,<br>            &quot;CpuRealtimeRuntime&quot;: 0,<br>            &quot;CpusetCpus&quot;: &quot;&quot;,<br>            &quot;CpusetMems&quot;: &quot;&quot;,<br>            &quot;Devices&quot;: [],<br>            &quot;DeviceCgroupRules&quot;: null,<br>            &quot;DeviceRequests&quot;: null,<br>            &quot;KernelMemory&quot;: 0,<br>            &quot;KernelMemoryTCP&quot;: 0,<br>            &quot;MemoryReservation&quot;: 0,<br>            &quot;MemorySwap&quot;: 0,<br>            &quot;MemorySwappiness&quot;: null,<br>            &quot;OomKillDisable&quot;: false,<br>            &quot;PidsLimit&quot;: null,<br>            &quot;Ulimits&quot;: null,<br>            &quot;CpuCount&quot;: 0,<br>            &quot;CpuPercent&quot;: 0,<br>            &quot;IOMaximumIOps&quot;: 0,<br>            &quot;IOMaximumBandwidth&quot;: 0,<br>            &quot;MaskedPaths&quot;: [<br>                &quot;/proc/asound&quot;,<br>                &quot;/proc/acpi&quot;,<br>                &quot;/proc/kcore&quot;,<br>                &quot;/proc/keys&quot;,<br>                &quot;/proc/latency_stats&quot;,<br>                &quot;/proc/timer_list&quot;,<br>                &quot;/proc/timer_stats&quot;,<br>                &quot;/proc/sched_debug&quot;,<br>                &quot;/proc/scsi&quot;,<br>                &quot;/sys/firmware&quot;<br>            ],<br>            &quot;ReadonlyPaths&quot;: [<br>                &quot;/proc/bus&quot;,<br>                &quot;/proc/fs&quot;,<br>                &quot;/proc/irq&quot;,<br>                &quot;/proc/sys&quot;,<br>                &quot;/proc/sysrq-trigger&quot;<br>            ]<br>        &#125;,<br>        &quot;GraphDriver&quot;: &#123;<br>            &quot;Data&quot;: &#123;<br>                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/f48ed78571e899feb1e6ef75274effd5898f67e1f03ce2707b6139b024a15b90-init/diff:/var/lib/docker/overlay2/02dacaffc64f4460948b0da3bfc99ae662a954517bdf99a022ddba4252daaeb1/diff&quot;,<br>                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/f48ed78571e899feb1e6ef75274effd5898f67e1f03ce2707b6139b024a15b90/merged&quot;,<br>                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/f48ed78571e899feb1e6ef75274effd5898f67e1f03ce2707b6139b024a15b90/diff&quot;,<br>                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/f48ed78571e899feb1e6ef75274effd5898f67e1f03ce2707b6139b024a15b90/work&quot;<br>            &#125;,<br>            &quot;Name&quot;: &quot;overlay2&quot;<br>        &#125;,<br>        &quot;Mounts&quot;: [],<br>        &quot;Config&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;30b9e1d3e0e1&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: false,<br>            &quot;AttachStdout&quot;: false,<br>            &quot;AttachStderr&quot;: false,<br>            &quot;Tty&quot;: false,<br>            &quot;OpenStdin&quot;: false,<br>            &quot;StdinOnce&quot;: false,<br>            &quot;Env&quot;: [<br>                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;<br>            ],<br>            &quot;Cmd&quot;: [<br>                &quot;/bin/sh&quot;,<br>                &quot;-c&quot;,<br>                &quot;while true;do echo Hello;sleep 1;done&quot;<br>            ],<br>            &quot;Image&quot;: &quot;centos&quot;,<br>            &quot;Volumes&quot;: null,<br>            &quot;WorkingDir&quot;: &quot;&quot;,<br>            &quot;Entrypoint&quot;: null,<br>            &quot;OnBuild&quot;: null,<br>            &quot;Labels&quot;: &#123;<br>                &quot;org.label-schema.build-date&quot;: &quot;20201204&quot;,<br>                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,<br>                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,<br>                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,<br>                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;<br>            &#125;<br>        &#125;,<br>        &quot;NetworkSettings&quot;: &#123;<br>            &quot;Bridge&quot;: &quot;&quot;,<br>            &quot;SandboxID&quot;: &quot;ce8566838ea1d35d1dcf361ad753f5bb0ee30d1620fbebb2472295d1bbebb1d0&quot;,<br>            &quot;HairpinMode&quot;: false,<br>            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,<br>            &quot;LinkLocalIPv6PrefixLen&quot;: 0,<br>            &quot;Ports&quot;: &#123;&#125;,<br>            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/ce8566838ea1&quot;,<br>            &quot;SecondaryIPAddresses&quot;: null,<br>            &quot;SecondaryIPv6Addresses&quot;: null,<br>            &quot;EndpointID&quot;: &quot;92a040160498a98fdc9fac4194cd8f8fce42c92269bb5a0bb207333c21593ed6&quot;,<br>            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>            &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>            &quot;GlobalIPv6PrefixLen&quot;: 0,<br>            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>            &quot;IPPrefixLen&quot;: 16,<br>            &quot;IPv6Gateway&quot;: &quot;&quot;,<br>            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>            &quot;Networks&quot;: &#123;<br>                &quot;bridge&quot;: &#123;<br>                    &quot;IPAMConfig&quot;: null,<br>                    &quot;Links&quot;: null,<br>                    &quot;Aliases&quot;: null,<br>                    &quot;NetworkID&quot;: &quot;baf930fbe322744c4b381bb941632068493b359bbd6ae45b320785ed5b471c90&quot;,<br>                    &quot;EndpointID&quot;: &quot;92a040160498a98fdc9fac4194cd8f8fce42c92269bb5a0bb207333c21593ed6&quot;,<br>                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>                    &quot;IPPrefixLen&quot;: 16,<br>                    &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6PrefixLen&quot;: 0,<br>                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>                    &quot;DriverOpts&quot;: null<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>]<br><br></code></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">//通常容器都是使用后台方式运行的，需要进入容器，修改一些配置<br><br>//命令<br>docker exec -it 容器id bashShell<br><br>//测试<br>[root@bogon /]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES<br>30b9e1d3e0e1   centos    &quot;/bin/sh -c &#x27;while t…&quot;   20 minutes ago   Up 20 minutes             bold_jemison<br>[root@bogon /]# docker exec -it 30b9e1d3e0e1 /bin/bash<br>[root@30b9e1d3e0e1 /]# ls<br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br>[root@30b9e1d3e0e1 /]# ps -ef<br>UID         PID   PPID  C STIME TTY          TIME CMD<br>root          1      0  0 13:37 ?        00:00:00 /bin/sh -c while true;do echo Hello;sleep 1;done<br>root       1229      0  0 13:57 pts/0    00:00:00 /bin/bash<br>root       1253      1  0 13:57 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1<br>root       1254   1229  0 13:57 pts/0    00:00:00 ps -ef<br><br><br>//方式二<br>docker attach 容器id<br>//测试<br>[root@30b9e1d3e0e1 /]# docker attach 30b9e1d3e0e1<br><br>docker exec    //进入容器后开启一个新的终端，可以在里面操作(常用)<br>docker attach  //进入容器正在执行的终端，不会启动新的进程<br></code></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp 容器id:容器内路径 目的地主机路径<br><br>//查看当前主机 home 目录<br>[root@bogon home]# ls<br>chziyue<br><br>//进入容器内部<br>[root@bogon home]# docker attach c8f6c548a9f8<br>[root@c8f6c548a9f8 /]# cd /home <br>[root@c8f6c548a9f8 home]# ls<br><br>//在容器内新建 index.html 文件<br>[root@c8f6c548a9f8 home]# touch index.html<br>[root@c8f6c548a9f8 home]# ls<br>index.html<br><br>//退出容器<br>[root@c8f6c548a9f8 home]# exit<br>exit<br>[root@bogon home]# docker ps<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>[root@bogon home]# docker ps -a<br>CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                      PORTS     NAMES<br>c8f6c548a9f8   centos    &quot;/bin/bash&quot;   3 minutes ago   Exited (0) 10 seconds ago             stupefied_buck<br><br>//将 index.html 拷贝出来到主机上<br>[root@bogon home]# docker cp c8f6c548a9f8:/home/index.html /home<br>[root@bogon home]# ls<br>chziyue  index.html<br><br>//拷贝是一个手动过程，未来还可以使用 -v 卷的技术，实现文件自动同步<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian WEB服务器部署笔记</title>
    <link href="/2021/09/11/Debian-WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/09/11/Debian-WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此文章详细记录了 WEB 服务器应用部署的全过程 包括 nginx 、php 、mysql 、curl 、openssl 等各种组件的部署方法。</p><h3 id="一、服务器本地部署"><a href="#一、服务器本地部署" class="headerlink" title="一、服务器本地部署"></a>一、服务器本地部署</h3><p>Debian 系统安装好后开始配置 SSH</p><h4 id="配置源："><a href="#配置源：" class="headerlink" title="配置源："></a>配置源：</h4><p>打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>注释掉所有源地址添加163源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.163.com/debian/  stretch main non-free contrib<br></code></pre></td></tr></table></figure><p>更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br></code></pre></td></tr></table></figure><h4 id="安装配置-ssh"><a href="#安装配置-ssh" class="headerlink" title="安装配置 ssh:"></a>安装配置 ssh:</h4><p>安装 ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install ssh<br></code></pre></td></tr></table></figure><p>打开 ssh 配置文件 配置允许 root 远程登录 ssh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>在 Authentication 部分注释掉 PermitRootLogin without-password 并添加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">PermitRootLogin yes<br></code></pre></td></tr></table></figure><p>重新启动 ssh 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service ssh restart<br></code></pre></td></tr></table></figure><h4 id="配置网络："><a href="#配置网络：" class="headerlink" title="配置网络："></a>配置网络：</h4><p>安装 ipconfig</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install net-tools<br></code></pre></td></tr></table></figure><p>查看网络信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifconfig<br></code></pre></td></tr></table></figure><p>修改配置文件配置静态 IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/network/interfaces<br></code></pre></td></tr></table></figure><p>配置 IP、子网掩码、网关</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">allow-hotplug enp3s0<br><span class="hljs-meta">#</span><span class="bash">iface enp3s0 inet dhcp</span><br>iface enp3s0 inet static<br>address 192.168.1.99<br>netmask 255.255.255.0<br>gateway 192.168.1.254<br></code></pre></td></tr></table></figure><p>重启服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">shutdown -r now<br></code></pre></td></tr></table></figure><h3 id="二、ssh-远程部署"><a href="#二、ssh-远程部署" class="headerlink" title="二、ssh 远程部署"></a>二、ssh 远程部署</h3><h4 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="安装依赖："></a>安装依赖：</h4><p>配置源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>添加以下源地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.163.com/debian/  stretch main non-free contrib<br>deb http://mirrors.163.com/debian/  stretch-updates main non-free contrib<br>deb http://mirrors.163.com/debian/  stretch-backports main non-free contrib<br>deb-src http://mirrors.163.com/debian/  stretch main non-free contrib<br>deb-src http://mirrors.163.com/debian/  stretch-updates main non-free contrib<br>deb-src http://mirrors.163.com/debian/  stretch-backports main non-free contrib<br>deb http://mirrors.163.com/debian-security/  stretch/updates main non-free contrib<br>deb-src http://mirrors.163.com/debian-security/  stretch/updates main non-free contrib<br></code></pre></td></tr></table></figure><p>更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br></code></pre></td></tr></table></figure><p>安装各种包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install build-essential g++ make libpcre3 libpcre3-dev sudo git zip libxml2-dev zlib1g-dev php-gd libpng-dev libwebp-dev libjpeg-dev php-intl libgeoip-dev libfreetype6-dev libxslt1-dev<br></code></pre></td></tr></table></figure><h4 id="安装-Mysql："><a href="#安装-Mysql：" class="headerlink" title="安装 Mysql："></a>安装 Mysql：</h4><p>下载地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://downloads.mysql.com/archives/community/<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install libaio1 libnuma1 libmecab2<br></code></pre></td></tr></table></figure><p>解压 Mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf mysql-server_5.7.34-1debian9_amd64.deb-bundle.tar<br></code></pre></td></tr></table></figure><p>按照顺序依次执行下面的命令进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-common_5.7.34-1debian9_amd64.deb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-community-client_5.7.34-1debian9_amd64.deb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-client_5.7.34-1debian9_amd64.deb<br></code></pre></td></tr></table></figure><p>执行下面命令后会提示设置 root 密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-community-server_5.7.34-1debian9_amd64.deb<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg -i mysql-server_5.7.34-1debian9_amd64.deb<br></code></pre></td></tr></table></figure><h4 id="配置远程可以连接-mysql："><a href="#配置远程可以连接-mysql：" class="headerlink" title="配置远程可以连接 mysql："></a>配置远程可以连接 mysql：</h4><p>打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/mysql/mysql.conf.d/mysqld.cnf<br></code></pre></td></tr></table></figure><p>注释掉以下配置信息，该配置信息表示只允许本地访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bind_address=127.0.0.1<br></code></pre></td></tr></table></figure><p>进入 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -uroot -p<br></code></pre></td></tr></table></figure><p>创建 root 用户并设置密码，如果报错 <code>ERROR 1396 (HY000): Operation CREATE USER failed for &#39;root&#39;@&#39;%&#39;</code> ，说明已经存在该用户对应主机，直接下一步授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;密码&#x27;;<br></code></pre></td></tr></table></figure><p>授权 root 用户最大权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;密码&#x27;;<br></code></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><h4 id="Mysql-常用命令："><a href="#Mysql-常用命令：" class="headerlink" title="Mysql 常用命令："></a>Mysql 常用命令：</h4><p>启动 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service mysql start<br></code></pre></td></tr></table></figure><p>重启 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart mysql<br></code></pre></td></tr></table></figure><p>停止 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service mysql restart<br></code></pre></td></tr></table></figure><p>查看 mysql 运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status mysql<br></code></pre></td></tr></table></figure><p>进入 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -uroot -p<br></code></pre></td></tr></table></figure><p>显示所有数据库列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">show databases;<br></code></pre></td></tr></table></figure><p>创建一个名为 blog 的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">create database blog;<br></code></pre></td></tr></table></figure><p>删除 blog 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">drop database zblog;<br></code></pre></td></tr></table></figure><h4 id="编译安装-openssl："><a href="#编译安装-openssl：" class="headerlink" title="编译安装 openssl："></a>编译安装 openssl：</h4><p>下载地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://www.openssl.org/source/<br></code></pre></td></tr></table></figure><p>解压 openssl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf openssl-1.1.1.tar.gz<br></code></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./config<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><h4 id="编译安装-curl："><a href="#编译安装-curl：" class="headerlink" title="编译安装 curl："></a>编译安装 curl：</h4><p>下载地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://curl.se/download.html<br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf curl-7.78.0<br></code></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --with-amissl --with-bearssl --with-gnutls --with-mbedtls --with-mesalink --with-nss --with-openssl --with-schannel --with-secure-transport --with-wolfssl<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><h4 id="编译安装-PHP-7-4："><a href="#编译安装-PHP-7-4：" class="headerlink" title="编译安装 PHP 7.4："></a>编译安装 PHP 7.4：</h4><p>下载地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://www.php.net/downloads<br></code></pre></td></tr></table></figure><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install libsqlite3-dev libcurl4-openssl-dev libonig-dev libpng-dev pkg-config libcurl4-gnutls-dev <br></code></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf php-7.4.23.tar.gz<br></code></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --enable-fpm --prefix=/usr/local/php --sysconfdir=/usr/local/php/etc --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/etc/php.d --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype --with-jpeg --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-mbstring --enable-gd --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --with-zip --with-bz2 --enable-soap --without-pear --enable-opcache --with-webp --with-zlib<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><p>进入 php 安装包目录复制 <code>php.ini-production</code> 到 <code>/usr/local/php/etc/</code> 目录并重命名为php.ini</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp php.ini-production /usr/local/php/etc/php.ini<br></code></pre></td></tr></table></figure><p>进入 <code>/usr/local/php/etc/</code> 目录复制 <code>php-fpm.conf.default</code> 重命名为 <code>php-fpm.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/php/etc/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp php-fpm.conf.default php-fpm.conf<br></code></pre></td></tr></table></figure><p>修改 <code>php-fpm.conf</code> 文件约125行内容为 <code>include=/usr/local/php/etc/php-fpm.d/www.conf.default</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /usr/local/php/etc/php-fpm.conf<br></code></pre></td></tr></table></figure><p>修改 <code>/usr/local/php/etc/php-fpm.d/www.conf.default</code> 文件23和24行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /usr/local/php/etc/php-fpm.d/www.conf.default<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">user = chziyue<br>group = chziyue<br></code></pre></td></tr></table></figure><h4 id="编译安装-nginx："><a href="#编译安装-nginx：" class="headerlink" title="编译安装 nginx："></a>编译安装 nginx：</h4><p>下载地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://nginx.org/en/download.html<br></code></pre></td></tr></table></figure><p>解压 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf nginx-1.14.0<br></code></pre></td></tr></table></figure><p>解压 ngx_brotli 放到 nginx 同级目录下 使 nginx 支持 br 压缩格式，如不需要 br 也可省略此步骤，在编译 nginx 时去掉最后的 <code>--add-module=../ngx_brotli</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf ngx_brotli<br></code></pre></td></tr></table></figure><p>编译安装 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-openssl=../openssl --with-openssl-opt=enable-tls1_3 --with-openssl-opt=&#x27;enable-tls1_3 enable-weak-ssl-ciphers&#x27; --add-module=../ngx_brotli<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><p>进入 <code>/usr/local/nginx/conf</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/conf<br></code></pre></td></tr></table></figure><p>打开 nginx 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano nginx.conf<br></code></pre></td></tr></table></figure><p>server 里添加 php 配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">location ~ \.php$ &#123;<br>    client_max_body_size 2M;<br>    client_body_temp_path /tmp;<br>    fastcgi_pass   127.0.0.1:9000;<br>    fastcgi_index  index.php;<br>    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;<br>    include        fastcgi_params;<br>&#125;<br></code></pre></td></tr></table></figure><p>http 里添加 gzip 和 br 配置信息 没有安装 br 可以去掉 br 配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">sendfile           on;<br>tcp_nopush         on;<br>tcp_nodelay        on;<br><br>keepalive_timeout  60;<br><br>gzip               on;<br>gzip_vary          on;<br>gzip_comp_level    6;<br>gzip_buffers       16 8k;<br>gzip_min_length    1024;<br>gzip_proxied       any;<br>gzip_disable       &quot;msie6&quot;;<br>gzip_http_version  1.0;<br>gzip_types         text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;<br><br>brotli             on;<br>brotli_comp_level  6;<br>brotli_buffers     16 8k;<br>brotli_min_length  20;<br>brotli_types       text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;<br></code></pre></td></tr></table></figure><h4 id="配置环境变量："><a href="#配置环境变量：" class="headerlink" title="配置环境变量："></a>配置环境变量：</h4><p>定位到~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~<br></code></pre></td></tr></table></figure><p>编辑.bashrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano .bashrc<br></code></pre></td></tr></table></figure><p>在最下面添加以下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">PATH=$PATH:/usr/local/php/sbin<br>export PATH<br>PATH=$PATH:/usr/local/nginx/sbin<br>export PATH<br></code></pre></td></tr></table></figure><p>保存退出后刷新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bashrc<br></code></pre></td></tr></table></figure><p>现在在任何目录下都可以使用下面的命令来启动 nginx 和 php<br>启动 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx<br></code></pre></td></tr></table></figure><p>重启 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><p>启动 php</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php-fpm<br></code></pre></td></tr></table></figure><p>浏览器访问服务器 ip 地址即可打开主页</p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debian</tag>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CII中文Linux命令</title>
    <link href="/2021/09/11/CII%E4%B8%AD%E6%96%87Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/09/11/CII%E4%B8%AD%E6%96%87Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CII 是基于 C++ 开发的 Linux 中文终端命令程序，安装后可以直接在终端使用中文命令来操作，大大的降低了 Linux 终端命令的操作门槛，摆脱了记不住英文命令的现象。</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><ul><li>进入 <code>/usr/local/bin/</code> 目录：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/bin/<br></code></pre></td></tr></table></figure></li><li>下载 CII:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://gitee.com/chziyue/doc/raw/master/cii<br></code></pre></td></tr></table></figure></li><li>为 CII 添加可执行权限:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x cii<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="中英文命令对照表："><a href="#中英文命令对照表：" class="headerlink" title="中英文命令对照表："></a>中英文命令对照表：</h2><table><thead><tr><th align="center"><strong>中文命令</strong></th><th align="center"><strong>英文命令</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">cii 帮助</td><td align="center">cii -h</td><td align="center">显示帮助信息</td></tr><tr><td align="center">cii 版本</td><td align="center">cii -v</td><td align="center">显示 CII 版本</td></tr><tr><td align="center">cii 显示命令</td><td align="center">cii -d</td><td align="center">显示输出的英文命令</td></tr><tr><td align="center">cii 隐藏命令</td><td align="center">cii -a</td><td align="center">隐藏输出的英文命令</td></tr><tr><td align="center">cii 列表</td><td align="center">ls -l</td><td align="center">默认添加 -l 参数</td></tr><tr><td align="center">cii 时间/日期</td><td align="center">date</td><td align="center">显示当前时间</td></tr><tr><td align="center">cii 内核</td><td align="center">uname -srm</td><td align="center">显示系统内核版本</td></tr><tr><td align="center">cii 处理器</td><td align="center">cat /proc/cpuinfo丨grep name丨cut -f2 -d:丨uniq -c</td><td align="center">显示 CPU 型号</td></tr><tr><td align="center">cii 系统</td><td align="center">cat /etc/os-release</td><td align="center">显示系统信息</td></tr><tr><td align="center">cii 位置</td><td align="center">pwd</td><td align="center">显示当前目录的位置</td></tr><tr><td align="center">cii 关机</td><td align="center">shutdown -h now</td><td align="center">立即关机</td></tr><tr><td align="center">cii 重启</td><td align="center">shutdown -r now</td><td align="center">立即重启</td></tr><tr><td align="center">cii 进程</td><td align="center">ps aux</td><td align="center">显示所有进程</td></tr><tr><td align="center">cii 进程 程序名</td><td align="center">ps aux丨grep 程序名</td><td align="center">显示单独程序进程，需要附带参数 (程序名)</td></tr><tr><td align="center">cii 结束进程 进程PID</td><td align="center">kill -QUIT 进程PID</td><td align="center">结束单独进程，需要附带参数 (程序PID)</td></tr><tr><td align="center">cii 端口</td><td align="center">netstat -lntp</td><td align="center">显示监听的端口</td></tr><tr><td align="center">cii 网卡</td><td align="center">netstat -i</td><td align="center">显示网卡信息</td></tr><tr><td align="center">cii 大小</td><td align="center">du -chs</td><td align="center">显示文件或目录占用空间的大小</td></tr><tr><td align="center">cii 新建目录 目录名</td><td align="center">mkdir 目录名</td><td align="center">需要附带参数 (目录名)</td></tr><tr><td align="center">cii 新建文件 文件名</td><td align="center">touch 文件名</td><td align="center">需要附带参数 (文件名)</td></tr><tr><td align="center">cii 下载 网址</td><td align="center">wget 网址</td><td align="center">需要附带参数 (网址)</td></tr><tr><td align="center">cii 压缩 文件名.gz/.zip 目录/文件</td><td align="center">tar cfz 或 zip -r</td><td align="center">需要附带两个参数(压缩后文件名和要压缩的目录或文件)，自动识别压缩包名使用不同的命令来压缩，如需压缩 .zip 需要提前安装 unzip：cii 安装 unzip</td></tr><tr><td align="center">cii 解压 文件名</td><td align="center">tar -xvf 文件名</td><td align="center">需要附带参数(文件名)，自动识别文件类型使用不同的命令来解压，如需解压 .zip 需要提前安装 unzip：cii 安装 unzip</td></tr><tr><td align="center">cii 实时进程</td><td align="center">top</td><td align="center">实时显示所有进程 (键入 q 即可退出)</td></tr><tr><td align="center">cii 在线用户</td><td align="center">who</td><td align="center">显示当前在线用户</td></tr><tr><td align="center">cii 当前用户</td><td align="center">whoami</td><td align="center">显示当前用户</td></tr><tr><td align="center">cii 主机名</td><td align="center">hostname</td><td align="center">显示主机名</td></tr><tr><td align="center">cii 系统名</td><td align="center">uname</td><td align="center">显示系统名</td></tr><tr><td align="center">cii 磁盘</td><td align="center">df -h</td><td align="center">显示磁盘占用的空间</td></tr><tr><td align="center">cii 分区</td><td align="center">fdisk -l</td><td align="center">显示磁盘分区信息</td></tr><tr><td align="center">cii 网络</td><td align="center">ifconfig</td><td align="center">显示当前网络信息 需要提前安装 ifconfig：cii 安装 net-tools</td></tr><tr><td align="center">cii 清屏</td><td align="center">clear</td><td align="center">刷新屏幕，清除屏幕所有信息</td></tr><tr><td align="center">cii 内存</td><td align="center">free -m</td><td align="center">显示当前内存信息</td></tr><tr><td align="center">cii 可执行</td><td align="center">chmod +x 文件名</td><td align="center">该文件可执行</td></tr><tr><td align="center">cii 不可执行</td><td align="center">chmod -x 文件名</td><td align="center">该文件不可执行</td></tr><tr><td align="center">cii 可写</td><td align="center">chmod 777 目录或文件名</td><td align="center">该目录或文件可写</td></tr><tr><td align="center">cii 不可写</td><td align="center">chmod 755 目录或文件名</td><td align="center">该目录或文件不可写</td></tr><tr><td align="center">cii 全可写</td><td align="center">chmod -R 777 目录或文件名</td><td align="center">该目录及以下所有目录和文件可写</td></tr><tr><td align="center">cii 全不可写</td><td align="center">chmod -R 755 目录或文件名</td><td align="center">该目录及以下所有目录和文件不可写</td></tr><tr><td align="center">cii 复制</td><td align="center">cp -r -f 目录或文件名 目标目录</td><td align="center">复制目录或文件到目标目录下</td></tr><tr><td align="center">cii 移动</td><td align="center">mv -f 目录或文件名 目标目录</td><td align="center">移动目录或文件到目标目录下</td></tr><tr><td align="center">cii 配置源</td><td align="center">自动配置国内源</td><td align="center">Debian系列专用</td></tr><tr><td align="center">cii 清理源</td><td align="center">yum/apt/dnf</td><td align="center">自动识别系统使用对应包管理工具</td></tr><tr><td align="center">cii 更新源</td><td align="center">yum/apt/zypper/dnf/pacman/apk</td><td align="center">自动识别系统使用对应包管理工具</td></tr><tr><td align="center">cii 更新包</td><td align="center">yum/apt/zypper/dnf/pacman/apk/swupd</td><td align="center">自动识别系统使用对应包管理工具</td></tr><tr><td align="center">cii 搜索包</td><td align="center">yum/apt/zypper/dnf/pacman/apk/swupd</td><td align="center">自动识别系统使用对应包管理工具</td></tr><tr><td align="center">cii 包信息</td><td align="center">yum/apt/zypper/dnf/pacman/apk/swupd</td><td align="center">自动识别系统使用对应包管理工具</td></tr><tr><td align="center">cii 安装</td><td align="center">yum/apt/zypper/dnf/pacman/apk/swupd</td><td align="center">自动识别系统使用对应包管理工具</td></tr><tr><td align="center">cii 卸载</td><td align="center">yum/apt/zypper/dnf/pacman/apk/swupd</td><td align="center">自动识别系统使用对应包管理工具</td></tr></tbody></table><h2 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a>历史更新</h2><ul><li><p><strong>2021年10月7日：</strong></p><ul><li>更新 <code>cii v1.3.5</code></li><li>新增 <code>cii 搜索包</code> 命令，搜索指定的包</li><li>新增 <code>cii 包信息</code> 命令，显示指定包的详细信息</li></ul></li><li><p><strong>2021年10月6日：</strong></p><ul><li>更新 <code>cii v1.3.4</code></li><li>新增 <code>cii 大小</code> 命令，显示文件或目录占用空间的大小</li><li>新增 <code>cii 分区</code> 命令，显示磁盘分区信息</li><li>新增 <code>cii 处理器</code> 命令，显示 CPU 型号</li></ul></li><li><p><strong>2021年10月4日：</strong></p><ul><li>更新 <code>cii v1.3.3</code></li><li>新增对 <code>Mint</code>、<code>EndeavourOS</code> 发行版系统的识别</li><li>新增 <code>cii 系统</code> 命令，可显示系统版本信息</li></ul></li><li><p><strong>2021年10月2日：</strong></p><ul><li>更新 <code>cii v1.3.2</code></li><li>更新 <code>cii 配置源</code> 命令针对 <code>Debian</code> 系列发行版系统可自动配置对应的源</li><li>新增对 <code>Alpine</code>、<code>Photon</code>、<code>Clear</code> 发行版系统的识别</li></ul></li><li><p><strong>2021年10月1日：</strong></p><ul><li>更新 <code>cii v1.3.1</code></li><li>新增 <code>cii 显示命令</code>、<code>cii 隐藏命令</code> 显示和隐藏输出的英文命令</li><li>新增 <code>cii 清理源</code></li><li>新增对 <code>EulerOS</code>、<code>Arch</code>、<code>Mageia</code>、<code>Kali</code> 发行版系统的识别</li></ul></li><li><p><strong>2021年9月29日：</strong></p><ul><li>更新 <code>cii v1.3</code></li><li>新增对 <code>Ubuntu</code> <code>Fedora</code> <code>OpenSUSE</code> <code>Amazon</code> <code>Oracle</code> 发行版系统的识别</li></ul></li><li><p><strong>2021年9月28日：</strong></p><ul><li>更新 <code>cii v1.2</code></li><li>更新部分命令可以正确的接收处理多个参数</li></ul></li><li><p><strong>2021年9月26日：</strong></p><ul><li>更新 <code>cii v1.1</code></li><li>合并 Debian/Ubuntu 和 RedHat/CentOS 两个系列到一个版本</li><li>新增系统识别功能，使用包管理工具命令时可以识别出发行版系统，自动切换对应的命令</li><li>新增对 <code>CentOS</code> <code>Debian</code> 发行版系统的识别</li><li>新增 <code>cii 复制</code> 命令</li><li>新增 <code>cii 移动</code> 命令</li></ul></li><li><p><strong>2021年9月23日：</strong></p><ul><li>更新 <code>cii v1.0.2</code></li><li>新增 <code>cii 可执行</code> 命令</li><li>新增 <code>cii 不可执行</code> 命令</li><li>新增 <code>cii 可写</code> 命令</li><li>新增 <code>cii 不可写</code> 命令</li><li>新增 <code>cii 全可写</code> 命令</li><li>新增 <code>cii 全不可写</code> 命令</li></ul></li><li><p><strong>2021年9月20日：</strong></p><ul><li>更新 <code>cii v1.0.1</code></li><li>新增 <code>cii 端口</code> 命令</li><li>新增 <code>cii 网卡</code> 命令</li><li>新增 <code>cii 压缩</code> 命令</li></ul></li><li><p><strong>2021年9月11日：</strong></p><ul><li>发布首个版本 <code>cii v1.0</code> 包括 Debian/Ubuntu 和 RedHat/CentOS 系列的两个版本</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>原创程序发布</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CII</tag>
      
      <tag>C++</tag>
      
      <tag>原创</tag>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux WEB服务器部署信息</title>
    <link href="/2021/09/08/Linux-WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E4%BF%A1%E6%81%AF/"/>
    <url>/2021/09/08/Linux-WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新博客已部署完成，与旧博客相比，提高了维护效率，同时也降低了运营成本，特此记录下旧博客更新配置信息。</p><h3 id="Linux-WEB服务器部署信息-2018年3月20日"><a href="#Linux-WEB服务器部署信息-2018年3月20日" class="headerlink" title="Linux WEB服务器部署信息(2018年3月20日)"></a>Linux WEB服务器部署信息(2018年3月20日)</h3><p>由于家里宽带升级，接入方式变更，服务器无法放在家里了，今网站正式入驻CVM，更换操作系统至 Debian 9.0 64位，Web Server Nginx 升级至 1.12.2，将 Mysql 数据库更换为 MariaDB 以下列出本站服务器配置与应用部署信息，提供参考。（<font color=#00b0f0>变更处加以颜色标注</font>）</p><h3 id="Server-应用"><a href="#Server-应用" class="headerlink" title="Server 应用"></a><strong>Server 应用</strong></h3><ul><li>OS：Debian 9.0 64位</li><li>web server：<font color=#00b0f0>nginx 1.12.2</font></li><li>product： PHP 7.1.5</li><li>数据库： <font color=#00b0f0>MariaDB 10.1.31</font></li><li>博客系统： Z-BlogPHP 1.5 Zero<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a><strong>Network</strong></h3></li><li>本站采用 com 顶级域名 + www 二级域名双域名组合</li><li>www 二级域名实行301重定向到顶级域名<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a><strong>Security</strong></h3></li><li>全站实行 HTTP/2 超文本传输协议 2.0</li><li>全站强制实行 HTTPS 协议</li><li>实行 HTTP 协议301重定向到 HTTPS 协议</li><li>开启 HSTS 严格安全传输协议</li><li>域名已加入谷歌预加载列表，并已同步到 Chrome Edge Firefox IE 等主流浏览器中</li><li>双证书均已部署 HPKP 公钥固定（公钥钉扎）</li><li>开启 Certificate Transparency（证书透明度）</li><li>开启 OCSP Stapling（OCSP 装订）</li><li>开启 TLS 1.0、TLS 1.1、TLS 1.2、TLS 1.3（支持更多客户端），采用支持 TLS_FALLBACK_SCSV 的方式来避免降级漏洞</li><li>使用 TrustAsia 颁发的两张证书，主证书加密算法 ECC 256，副证书加密算法 RSA 2048</li><li>主证书使用 ECDHE_ECDSA 密钥交换机制，副证书使用 ECDHE_RSA 密钥交换机制。</li><li>优先使用 Google 的 CHACHA20-POLY1305 新式加密算法</li><li>ECC曲线顺序 x25519 secp256r1</li><li>禁止与不支持 Perfect Forward Secrecy（完全正向保密）的客户端建立连接</li><li>开启 ALPN</li><li>开启 NPN</li><li>开启防盗链功能</li><li>禁止加载外部资源</li><li>禁止加载恶意跨站脚本</li><li>禁止浏览器尝试 MIME 嗅探内容类型，并强制其遵守已声明的内容类型</li><li>部署内容安全策略,保护网站免受 XSS 攻击,防止浏览器加载恶意资源</li><li>部署在发生跨域访问时发送只包含 host 的 Referrer 避免泄露安全信息<h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a><strong>Performance</strong></h3></li><li>采用 Brotli 和 Gzip 双压缩格式，支持 Brotli 的浏览器优先使用 Brotli 压缩格式</li><li>部署全站静态文件缓存策略</li><li>部署全站伪静态规则</li><li>所有图片均已做离线压缩处理<h3 id="历史更新"><a href="#历史更新" class="headerlink" title="历史更新"></a><strong>历史更新</strong></h3></li><li><strong>2017年6月1日</strong><br>加入新式加密算法 CHACHA20-POLY1305</li><li><strong>2017年6月2日</strong><br>增加对 Brotli 压缩格式的支持，支持 Brotli 的浏览器优先使用 Brotli 压缩格式</li><li><strong>2017年6月3日</strong><br><del>静态文件部署 CDN（内容分发网络）</del> <font color=#00b0f0>该CDN部署已取消。</font></li><li><strong>2017年6月10日</strong><br>添加图片延时加载功能，不加载看不到的图片，待向下滚动到该图片处再建立连接加载</li><li><strong>2017年7月2日</strong><br>升级 Nginx 至 1.12.0<br>升级 openssl 至 1.1.0e<br>开启 TLS 1.3 draft 18 （ 现阶段 Firefox 和 Chrome 支持的最高版本）</li><li><strong>2018年3月20日</strong><br><font color=#00b0f0>服务器入驻 CVM<br>升级操作系统至 Debian 9.0 64位<br>升级Nginx至 10.12.2<br>数据库更换为 MariaDB 10.1.31</font></li><li><strong>2018年3月24日</strong><br><del>更换 TrustAsia 颁发的两张证书，主证书加密算法 ECC 256，副证书加密算法 RSA 2048</del></li><li><strong>2018年3月26日</strong><br><font color=#00b0f0>开启 DNS CAA 策略</font></li><li><strong>2018年3月31日</strong><br><font color=#00b0f0>全站图片部署 WebP+png双格式，支持WebP图片格式的浏览器优先使用WebP格式，配合延时加载首页大小缩小到15KB以下<br>更换 Let’s Encrypt 颁发的两张通配符证书，主证书加密算法 ECC 256，副证书加密算法 RSA 2048<br>部署 HPKPRO（公钥固定报告）</font></li><li><strong>2018年4月15日</strong><br><font color=#00b0f0>增加 OCSP Must Staple（必须装订）策略</font></li><li><strong>2018年4月18日</strong><br><font color=#00b0f0>重新编译Nginx 更新至1.14.0<br>升级openssl至1.1.1 pre2 支持 TLS 1.3 draft 23 （ 现阶段 Firefox 和 Chrome 支持的最高版本）</font></li><li><strong>2018年6月15日</strong><br><font color=#00b0f0>为符合 PCI DSS 标准，今日起彻底关闭 TLS1.0 协议</font></li><li><strong>2018年7月21日</strong><br><font color=#00b0f0>重新编译安装 nginx 更新 openssl 至1.1.1 pre7 支持 TLS 1.3 draft 28</font></li><li><strong>2018年11月27日</strong><br><font color=#00b0f0>重新编译安装 nginx 更新 openssl 至1.1.1 正式版 支持 TLS 1.3 (RFC 8446)</font></li><li><strong>2019年1月13日</strong><br><font color=#00b0f0>添加新的安全响应头 Feature-Policy ( 使用 Chrome 测试正常，其他浏览器目前还不支持所以在开发人员工具里会报错 )<br>由于TLS1.1协议已无用，今日起彻底关闭</font></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Debian</tag>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
